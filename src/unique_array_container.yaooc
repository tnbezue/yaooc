/*
		Copyright (C) 2016-2020  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%header_prefix yaooc
%include <yaooc/array_container.yaooh>

%class yaooc_unique_array_container : yaooc_array_container {

  adjunct:

    iterator insert(const_iterator pos,const_pointer value)
    {
      return yaooc_unique_array_container_insert_range(this,pos,value,((yaooc_private_const_pointer)value)+TYPE_SIZE(this));
    }

    /*
      Not really valid for unique array.  Can only insert 1 to be unique.
    */
    iterator insertn(const_iterator pos,size_t n,const_pointer value)
    {
      return yaooc_unique_array_container_insert_range(this,pos,value,((yaooc_private_const_pointer)value)+TYPE_SIZE(this));
    }

    iterator insert_range(const_iterator pos,const_iterator f,const_iterator l)
    {
      size_t ipos=INDEX(this,pos);
      yaooc_private_const_iterator first=f;
      yaooc_private_const_iterator last=l;
      size_t index=(size_t)-1;
      iterator temp;
      for(;first<last;first+=TYPE_SIZE(this)) {
        if((temp = yaooc_array_container_find(this,first)) == END(this)) {
          temp=yaooc_array_container_insertn(this,AT(this,ipos),1,first);
          ipos++;
        }
        if(index == (size_t)-1)
          index=INDEX(this,temp);
      }
      /*
        index will only be -1 when zero elements are inserted
      */
      return AT(this,index==(size_t)-1 ? SIZE(this) : index);
    }

    void resize_value(size_t n,const_pointer val)
    {
      if(n<this->size_) {
        yaooc_array_container_erase_range(this,AT(this,n),END(this));
      } else if(n > this->size_){
        yaooc_unique_array_container_insert_range(this,END(this),val,((yaooc_private_const_pointer)val)+TYPE_SIZE(this));
      }
    }

    void resize(size_t n)
    {
      pointer temp=__new_array(TYPE_INFO(this),1);
      yaooc_unique_array_container_resize_value(this,n,temp);
      delete(temp);
    }


};
