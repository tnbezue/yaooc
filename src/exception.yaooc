/*
		Copyright (C) 2016-2020  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%header_prefix yaooc
%include <yaooc/object.yaooh>

%header
#include <setjmp.h>
%%

#include <yaooc/garbage_bag.h>
#include <stdio.h>
#include <string.h>
#if defined(_WIN32) && !defined(__YAOOC_USE_PTRHEADS)
#include <windows.h>
typedef uintptr_t yaooc_exception_thread_t;
#define yaooc_current_thread_id() (uintptr_t)GetCurrentThread()
#else
#include <pthread.h>
typedef pthread_t yaooc_exception_thread_t;
#define yaooc_current_thread_id() pthread_self()
#endif

%class yaooc_exception : yaooc_object
{
		yaooc_exception()
    {
      this->what_=NULL;
      this->error_code_=0;
    }

    yaooc_exception_ctor_v(int err_code,const char*fmt,...)
    {
      this->error_code_=err_code;
      if(fmt != NULL) {
        va_list args2;
        va_copy(args2,args);
        int size_needed=vsnprintf(NULL,0,fmt,args2);
        va_end(args2);
        if(size_needed > 0) {
          this->what_=MALLOC(++size_needed);
          vsnprintf(this->what_,size_needed,fmt,args);
        }
      }
    }

		~yaooc_exception()
    {
      if(this->what_)
        FREE(this->what_);
    }

		yaooc_exception(src)
    {
      yaooc_exception_default_ctor(this);
      yaooc_exception_assign(this,src);
    }

		operator=(src)
    {
      yaooc_exception_dtor(this);
      this->what_ = src->what_ ? STRDUP(src->what_) : NULL;
    }

  table:
    const char* what() const
    {
      return this->what_;
    }

    int error_code() const
    {
      return this->error_code_;
    }
	instance:
		char* what_;
    int error_code_;
};

%header
/*
  Macros/routines to implement TRY/CATCH
*/
void __yaooc_exception_handled__();

jmp_buf* yaooc_jmpbuf_new();
yaooc_exception_pointer yaooc_exception_current_exception_thrown();
void __throw__(pointer);
bool __catch__(const char*);
void __rethrow_last_exception__();

pointer yaooc_exception_garbage_bag_save(pointer);
pointer yaooc_exception_garbage_bag_save_static_array(pointer,const type_info_t*,size_t);
void yaooc_exception_garbage_bag_clear();
void yaooc_exception_garbage_bag_delete();

/*
  throw an exception
*/
#define THROW(e) \
    __throw__(e)

#define TRY if(setjmp(*yaooc_jmpbuf_new()) == 0) { \
     {

#define CATCH(exception_type,e) \
    /* No exception thrown or exception was caught in preceding block */ \
    }  \
    __yaooc_exception_handled__(); \
  } else  \
      /* Exception thrown not caught by preceding block. Check if it should be caught here */ \
  if(__catch__(# exception_type "_t")) {   { \
    exception_type ## _const_pointer e=(exception_type ## _const_pointer)yaooc_exception_current_exception_thrown(); \
    (void) e;

#define ETRY \
    }  \
    /* No exception thrown or exception was caught in preceding block */ \
    __yaooc_exception_handled__(); \
} else  {\
    /* Exception not caught by any catch block in the TRY/ETRY section -- rethrow */ \
    __rethrow_last_exception__(); \
}

%%

typedef struct yaooc_jmpbuf_s yaooc_jmpbuf_t;
struct yaooc_jmpbuf_s {
  jmp_buf jb_;
  yaooc_exception_t* exception_thrown_;
  yaooc_garbage_bag_t* pb_;
  yaooc_jmpbuf_t* prev_;
};
typedef struct yaooc_exception_thread_jmpbuf_node_s yaooc_exception_thread_jmpbuf_node_t;
struct yaooc_exception_thread_jmpbuf_node_s {
  yaooc_exception_thread_jmpbuf_node_t* next_;
  yaooc_exception_thread_t tid_;
  yaooc_jmpbuf_t* current_jmpbuf_;
};


#if defined(_WIN32) && !defined(__YAOOC_USE_PTHREADS)
static CRITICAL_SECTION exception_mutex; // = PTHREAD_MUTEX_INITIALIZER;
void init_exceptions() { InitializeCriticalSection(&exception_mutex); }
#else
static pthread_mutex_t exception_mutex  = PTHREAD_MUTEX_INITIALIZER;
void init_exceptions() { }
#endif

void yaooc_exception_remove_jmpbuf(yaooc_exception_thread_t);
void yaooc_exception_thread_list_remove_exception_thread(yaooc_exception_thread_t);

static void yaooc_exception_terminate(yaooc_exception_pointer e);
static void yaooc_jmpbuf_destroy(yaooc_jmpbuf_t*);
yaooc_exception_thread_jmpbuf_node_t* yaooc_exception_thread_jmpbuf_head=NULL;
yaooc_exception_thread_jmpbuf_node_t* yaooc_exception_thread_jmpbuf_tail=NULL;

yaooc_exception_thread_jmpbuf_node_t* yaooc_exception_thread_jmpbuf_list_find_jmpbuf(yaooc_exception_thread_t tid)
{
  yaooc_exception_thread_jmpbuf_node_t* current=yaooc_exception_thread_jmpbuf_head;
  while(current != NULL) {
    if(tid==current->tid_)
      return current;
    current=current->next_;
  }
  return NULL;
}

/*
  Make sure to call find before calling this function.  It does not check if one exists
  before creating a new one.
*/
yaooc_exception_thread_jmpbuf_node_t* yaooc_exception_thread_node_create_thread_list(yaooc_exception_thread_t tid)
{
#if defined(_WIN32) && !defined(_YAOOC_USE_PTHREADS)
  EnterCriticalSection(&exception_mutex);
#else
  pthread_mutex_lock(&exception_mutex);
#endif
  yaooc_exception_thread_jmpbuf_node_t* current=MALLOC(sizeof(yaooc_exception_thread_jmpbuf_node_t));
  current->tid_=tid;
  current->next_=NULL;
  current->current_jmpbuf_=NULL;
//  current->exception_thread_=yaooc_exception_thread_create();
  if(yaooc_exception_thread_jmpbuf_head==NULL) {
    yaooc_exception_thread_jmpbuf_head=yaooc_exception_thread_jmpbuf_tail=current;
  } else {
    yaooc_exception_thread_jmpbuf_tail->next_=current;
    yaooc_exception_thread_jmpbuf_tail=current;
  }
#if defined(_WIN32) && !defined(_YAOOC_USE_PTHREADS)
  LeaveCriticalSection(&exception_mutex);
#else
  pthread_mutex_unlock(&exception_mutex);
#endif
  return current;
}

/*

*/
yaooc_exception_thread_jmpbuf_node_t* yaooc_exception_thread_jmpbuf_find_or_create_exception_thread(yaooc_exception_thread_t tid)
{
  yaooc_exception_thread_jmpbuf_node_t* current=yaooc_exception_thread_jmpbuf_list_find_jmpbuf(tid);
  return current ? current : yaooc_exception_thread_node_create_thread_list(tid);
}
/*
void yaooc_exception_thread_list_remove_all()
{
  yaooc_exception_thread_jmpbuf_node_t* current=yaooc_exception_thread_jmpbuf_head;
  yaooc_exception_thread_jmpbuf_node_t* temp;
  while(current != NULL) {
    temp=current->next_;
    current=temp;
  }
  yaooc_exception_thread_jmpbuf_head=yaooc_exception_thread_jmpbuf_tail=NULL;
}
*/
void yaooc_exception_thread_list_remove_exception_thread(yaooc_exception_thread_t tid)
{
  yaooc_exception_thread_jmpbuf_node_t* current=yaooc_exception_thread_jmpbuf_head;
  yaooc_exception_thread_jmpbuf_node_t* previous=NULL;
  while(current != NULL) {
    if(tid==current->tid_) {
#if defined(_WIN32) && !defined(_YAOOC_USE_PTHREADS)
      EnterCriticalSection(&exception_mutex);
#else
      pthread_mutex_lock(&exception_mutex);
#endif
      if(previous) {
        previous->next_=current->next_;
        if(current->next_ ==NULL) { /* removing last item in list */
          yaooc_exception_thread_jmpbuf_tail=previous;
        }
      } else {
        /* Remove first item in list */
        yaooc_exception_thread_jmpbuf_head=current->next_;
        if(current->next_ == NULL) {
          /* only one item in list */
          yaooc_exception_thread_jmpbuf_head=yaooc_exception_thread_jmpbuf_tail=NULL;
        }
      }
#ifdef _WIN32
      LeaveCriticalSection(&exception_mutex);
#else
      pthread_mutex_unlock(&exception_mutex);
#endif
//      yaooc_exception_thread_destroy(current->exception_thread_);
      FREE(current);
      break;
    }
    previous=current;
    current=current->next_;
  }
}

yaooc_jmpbuf_t* yaooc_current_jmpbuf();

/*
void yaooc_jmpbuf_dump(* et)
{
  printf("Current jmpbuf: %p\n",et->current_jmpbuf_);
  if(et->current_jmpbuf_) {
    printf("Exception: %p\n"
        "Pointer bag size: %zu\n"
        "Previous: %p\n",et->current_jmpbuf_->exception_thrown_,
        M(et->current_jmpbuf_->pb_,size),et->current_jmpbuf_->prev_);
  }
}
*/

jmp_buf* yaooc_jmpbuf_new()
{
  yaooc_exception_thread_jmpbuf_node_t* node=yaooc_exception_thread_jmpbuf_find_or_create_exception_thread(yaooc_current_thread_id());
  yaooc_jmpbuf_t* prev=node->current_jmpbuf_;
  node->current_jmpbuf_=(yaooc_jmpbuf_t*)MALLOC(sizeof(yaooc_jmpbuf_t));
  node->current_jmpbuf_->exception_thrown_=NULL;
  node->current_jmpbuf_->pb_=new(yaooc_garbage_bag);
  node->current_jmpbuf_->prev_=prev;
  return &(node->current_jmpbuf_->jb_);
}

/*
  Moves to previous jumbuf when no exception occurred or after successfully handling an exception
*/
void __yaooc_exception_handled__()
{
  yaooc_exception_thread_jmpbuf_node_t* node=yaooc_exception_thread_jmpbuf_list_find_jmpbuf(yaooc_current_thread_id());
  yaooc_jmpbuf_t* temp=node->current_jmpbuf_;
  node->current_jmpbuf_=temp->prev_;
  yaooc_jmpbuf_destroy(temp);
}

/*
  Called by ETRY macro.  The exception has not been handled.  Move to the level of exceptions.
  Copies file and line number information to next environment
*/

static void yaooc_jmpbuf_destroy(yaooc_jmpbuf_t* jb)
{

  if(jb) {
    delete(jb->pb_);
    if(jb->exception_thrown_)
      delete(jb->exception_thrown_);
    FREE(jb);
  }
}

static void yaooc_exception_terminate(yaooc_exception_pointer e)
{
  fprintf(stderr,"terminate called after throwing %s : %s\n",e->class_table_->type_name_,M(e,what) ? M(e,what) : "");
  delete(e);
  exit(0);
}

/*
  Throw and exception
*/
void __throw__(pointer e)
{
  yaooc_exception_thread_jmpbuf_node_t* node=yaooc_exception_thread_jmpbuf_list_find_jmpbuf(yaooc_current_thread_id());
  if(node != NULL) { // && node->current_jmpbuf_ != NULL) {
    /*
      Traverse upward until a jmpbuf found that has not had an exception thrown
    */
    while(node->current_jmpbuf_ != NULL && node->current_jmpbuf_->exception_thrown_ != NULL) {
      yaooc_jmpbuf_t* temp=node->current_jmpbuf_;
      node->current_jmpbuf_=temp->prev_;
      yaooc_jmpbuf_destroy(temp);
    }
  }
  if(node ==NULL || node->current_jmpbuf_ == NULL)
    yaooc_exception_terminate(e); /* Will not return */
  node->current_jmpbuf_->exception_thrown_=e;
  longjmp(node->current_jmpbuf_->jb_,1);
}

/*
  Reached an ETRY without an exception being handled.  Rethrow the last exception
*/
void __rethrow_last_exception__()
{
  yaooc_exception_thread_jmpbuf_node_t* node=yaooc_exception_thread_jmpbuf_list_find_jmpbuf(yaooc_current_thread_id());
  yaooc_jmpbuf_t* temp =node->current_jmpbuf_;
  pointer e = temp->exception_thrown_;
  temp->exception_thrown_ = NULL;
  node->current_jmpbuf_=temp->prev_;
  yaooc_jmpbuf_destroy(temp);
  __throw__(e);
}

bool __catch__(const char* etype)
{
  return yaooc_object_isa(yaooc_exception_current_exception_thrown(),etype);
}
/*
  Called from CATCH and ETRY macros -- node and node->current_jmpbuf_ should never be NULL
*/
yaooc_jmpbuf_t* yaooc_current_jmpbuf()
{
  yaooc_exception_thread_jmpbuf_node_t* node=yaooc_exception_thread_jmpbuf_list_find_jmpbuf(yaooc_current_thread_id());
  return node->current_jmpbuf_;
}

pointer yaooc_exception_garbage_bag_save(pointer p)
{
  yaooc_jmpbuf_t* cjb=yaooc_current_jmpbuf();
  if(cjb)
    M(cjb->pb_,add,p);
  return p;
}

pointer yaooc_exception_garbage_bag_save_static_array(pointer p,const type_info_t* ti,size_t n)
{
  yaooc_jmpbuf_t* cjb=yaooc_current_jmpbuf();
  if(cjb)
    M(cjb->pb_,add_static,p,ti,n);
  return p;
}

void yaooc_exception_garbage_bag_clear(pointer p)
{
  yaooc_jmpbuf_t* cjb=yaooc_current_jmpbuf();
  if(cjb)
    M(cjb->pb_,clear);
}

void yaooc_exception_garbage_bag_delete(pointer p)
{
  yaooc_jmpbuf_t* cjb=yaooc_current_jmpbuf();
  if(cjb)
    M(cjb->pb_,del_all);
}

/*
  Called from CATCH block so current jmpbuf and exception will not be NULL.
*/
yaooc_exception_pointer yaooc_exception_current_exception_thrown()
{
  return yaooc_current_jmpbuf()->exception_thrown_;
}

%header
#define egb_save(ptr) yaooc_exception_garbage_bag_save(ptr)

#define egb_new(T)         egb_save(new(T))
#define egb_new_array(T,N) egb_save(new_array(T,N))
#define egb_new_copy(P)    egb_save(new_copy(P))
#define egb_new_array_copy(P,N)    egb_save(new_array_copy(P,N))
#define egb_new_ctor(T,CON,...)     egb_save(new_ctor(T,CON,## __VA_ARGS__))
#define egb_new_array_ctor(T,N,...)     egb_save(new_array_ctor(T,N,CON,## __VA_ARGS__))

#define egb_save_static(P,T)       yaooc_exception_garbage_bag_save_static_array(P,T ## _ti,1)
#define egb_save_static_array(P,T,N)       yaooc_exception_garbage_bag_save_static_array(P,T ## _ti,N)
#define egb_newp(P,T)      egb_save_static(newp(P,T),T ## _ti,1)
#define egb_newp_array(P,T,N)      egb_save_static_array(newp_array(P,T,N),T ## _ti,N)
#define egb_newp_copy_static(P,T,CP)      egb_save_static(newp_copy_static(P,T,CP),T ## _ti,1)
#define egb_newp_array_copy_static(P,T,CP,N)      egb_save_static_array(newp_array_copy_static(P,T,CP,N),T ## _ti,N)
#define egb_newp_ctor(P,T,CON,...)      egb_save_static(newp_ctor(P,T,CON,## __VA_ARGG__),T ## _ti,1)
#define egb_newp_array_ctor(P,T,N,CON,...)      egb_save_static_array(newp_array_ctor(P,T,N,CON,## __VA_ARGG__),T ## _ti,1)


#define egb_clear()  yaooc_exception_garbage_bag_clear(ptr)
#define egb_delete() yaooc_exception_garbage_bag_delete(ptr)

%%

%class yaooc_stream_exception : yaooc_exception
{
  yaooc_stream_exception_ctor_v(int error_code,const char* fmt,...) = yaooc_exception_ctor_v;
};

void throw_stream_exception(pointer p,const char* what)
{
  THROW(new_ctor(yaooc_stream_exception,yaooc_stream_exception_ctor_v,21,"No %s method for %s type",
        what,((yaooc_object_class_table_t*)(((yaooc_object_pointer)p)->class_table_))->type_name_));
}

%class yaooc_array_container_exception : yaooc_exception
{
  yaooc_array_container_exception_ctor_v(int error_code,const char* fmt,...) = yaooc_exception_ctor_v;
};

void throw_yaooc_array_container_exception(pointer p,const char* what)
{
  THROW(new_ctor(yaooc_array_container_exception,yaooc_array_container_exception_ctor_v,32,"%s",
        what,((yaooc_object_class_table_t*)(((yaooc_object_pointer)p)->class_table_))->type_name_));
}

