/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%include <yaooc/base_parser.yaooh>
%include <yaooc/exception.yaooh>
%prefix_directory yaooc

%header
#include <yaooc/json.h>

typedef struct {
  yaooc_json_string_t* key;
  yaooc_json_value_t* value;
} yaooc_json_pair_t;

%%

#include <sys/stat.h>
#include <fcntl.h>
%class yaooc_json_parser_exception : yaooc_exception {
  yaooc_json_parser_exception_ctor_v(int error_code,const char* fmt,...) = yaooc_exception_ctor_v;
};


%class yaooc_json_parser : yaooc_base_parser {

  table:
    bool whitespace(yaooc_token_t* r)
    {
      *r=yaooc_default_token(this);
      yaooc_token_t ws;
      while(true) {
        if(!yaooc_base_parser_space(this,&ws))
          if(!yaooc_base_parser_crlf(this,&ws))
            if(!yaooc_base_parser_c_comment(this,&ws))
              if(!yaooc_base_parser_cpp_comment(this,&ws))
                if(!yaooc_base_parser_shell_comment(this,&ws))
                  break;
      }
      r->end_=yaooc_base_parser_current_pos(this);
      return r->beg_!=r->end_;
    }

    bool parse_json_null(yaooc_json_value_t** jnull)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,str,"null",&r)) {
        *jnull=new(yaooc_json_null);
        ret=true;
      }
      return ret;
    }

    bool parse_json_bool(yaooc_json_value_t** jbool)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,str,"true",&r) || M(this,str,"false",&r)) {
        *jbool=new_ctor(yaooc_json_bool,yaooc_json_bool_ctor_bool,*r.beg_=='t');
        ret=true;
      }
      return ret;
    }

    bool parse_json_integer(yaooc_json_value_t** jinteger)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,integer,&r)) {
    //    char* text=M(&r,get_text);
        *jinteger=new_ctor(yaooc_json_integer,yaooc_json_integer_ctor_int,atoll(r.beg_));
    //    delete(text);
        ret=true;
      }
      return ret;
    }

    bool parse_json_real(yaooc_json_value_t** jreal)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,real,&r)) {
        *jreal=new_ctor(yaooc_json_real,yaooc_json_real_ctor_real,atof(r.beg_));
        ret=true;
      }
      return ret;
    }

    bool parse_json_string(yaooc_json_value_t** jstring)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,double_quoted_string,&r) || M(this,ident,&r)) {
        *jstring=new_ctor(yaooc_json_string,yaooc_json_string_ctor_ccs_size,r.beg_,r.end_-r.beg_);
        ret=true;
      }
      return ret;
    }

    bool parse_json_array(yaooc_json_value_t** jarray)
    {
      bool ret=false;
      yaooc_json_value_t* value;
      yaooc_token_t r;
      RULE_START(this);
      if(M(this,chr,'[',&r)) {
        *jarray=new(yaooc_json_array);
        ret=true;
        while(true) {
          if(!M(this,parse_json_value,&value)) {
            // Array can be empty.  However, one or more items in array means that a comma
            // preceded this attempt to obtain a jvalue -- thus this will be a syntax error
            if(M((yaooc_json_array_t*)*jarray,size) == 0)
              break;
            else
              THROW(new_ctor(yaooc_json_parser_exception,yaooc_json_parser_exception_ctor_v,64,
                  "Error processing json array near line %d",this->line_no_));
          }
          M((yaooc_json_array_pointer)*jarray,insert,value);
          delete(value);
          if(!M(this,chr,',',&r))
            break;
        }
        if(!M(this,chr,']',&r)) {
          THROW(new_ctor(yaooc_json_parser_exception,yaooc_json_parser_exception_ctor_v,64,
              "Error processing json array near line %d",this->line_no_));
        }
      }
      if(ret)
        RULE_SUCCESS(this);
      else
        RULE_FAIL(this);
      return ret;
    }

    bool parse_json_object(yaooc_json_value_t** jobject)
    {
      bool ret=false;
      yaooc_token_t r;
      if(M(this,chr,'{',&r)) {
        ret=true;
        *jobject=new(yaooc_json_object);
        yaooc_json_pair_t jp;
        while(yaooc_json_parser_parse_json_pair(this,&jp)) {
          M((yaooc_json_object_pointer)*jobject,insert,jp.key,jp.value);
          delete(jp.key);
          delete(jp.value);
          jp.key=NULL;
          jp.value=NULL;
          if(!M(this,chr,',',&r))
            break;
        }
        if(!M(this,chr,'}',&r)) {
          THROW(new_ctor(yaooc_json_parser_exception,yaooc_json_parser_exception_ctor_v,64,
              "Error processing json object near line %d",this->line_no_));
        }
      }
      return ret;
    }

    bool parse_json_value(yaooc_json_value_t** jvalue)
    {
      bool ret=true;
      if(!M(this,parse_json_object,jvalue))
        if(!M(this,parse_json_array,jvalue))
          if(!M(this,parse_json_bool,jvalue))
            if(!M(this,parse_json_null,jvalue))
              if(!M(this,parse_json_string,jvalue))
                if(!M(this,parse_json_integer,jvalue))
                  if(!M(this,parse_json_real,jvalue))
                    ret=false;
      return ret;
    }

    bool parse_string(const char* str,yaooc_json_value_t** jvalue)
    {
      bool ret=true;
      yaooc_token_t ws;
      if(str) {
        M(this,set_parse_string,str);
        M(this,whitespace,&ws);
        ret=M(this,parse_json_value,jvalue);
        if(*this->current_pos_!=0)
          puts("Error parsing file");
      }
      return ret;
    }

    bool parse_file(const char* file,yaooc_json_value_t** jvalue)
    {
      bool ret=false;
      struct stat st;
      if(stat(file,&st)==0 && S_ISREG(st.st_mode)) {
        int fh=open(file,O_RDONLY);
        if(fh > 0) {
          char* buffer=(char*)MALLOC(st.st_size+1);
          read(fh,buffer,st.st_size);
          buffer[st.st_size]=0;
          close(fh);
    //			puts(buffer);
          ret=M(this,parse_string,buffer,jvalue);
          FREE(buffer);
        }
      }
      return ret;
    }

  adjunct:
    bool parse_json_pair(yaooc_json_pair_t* jpair)
    {
      bool ret=false;
      *jpair = (yaooc_json_pair_t){ NULL,NULL};
      RULE_START(this);
      yaooc_token_t r;
      if(M(this,parse_json_string,(yaooc_json_value_t**)&jpair->key) && M(this,chr,':',&r)) {
        if(M(this,parse_json_value,(yaooc_json_value_t**)&jpair->value)) {
          RULE_SUCCESS(this);
          ret=true;
        } else {
          RULE_FAIL(this);
          if(jpair->key) delete(jpair->key);
          if(jpair->value) delete(jpair->value);
          ret=false;
        }
      }
      return ret;
    }
};
