/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
%header_directory yaooc
%include <yaooc/object.yod>

%header
#include <yaooc/string.h>
#include <yaooc/stream.h>
%%

#include <time.h>
#include <yaooc/sstream.h>
#include <string.h>

%class yaooc_date_time : yaooc_object {

    yaooc_date_time()
    {
      this->time_=time(NULL);
    }

    ~yaooc_date_time() = delete;

    operator=(src)
    {
      this->time_=src->time_;
    }

    int operator<=>(lhs,rhs)
    {
      return lhs->time_ - rhs->time_;
    }

    operator<<(ostrm)
    {
//      time_t t=this->time_;
      struct tm* tm=localtime(&this->time_);
      char dstr[64];
      strftime(dstr,64,"%c",tm);
      M(ostrm,printf,"%s",dstr);
    }

    yaooc_date_time_ctor_int(time_t t)
    {
      M(this,set,t);
    }

    yaooc_date_time_ctor_ymdhms(int y,int mon,int d,int h,int min,int s)
    {
      M(this,set_ymdhms,y,mon,d,h,min,s);
    }

    yaooc_date_time_ctor_ymd(int y,int mon,int d) : yaooc_date_time_ctor_ymdhms(y,mon,d,0,0,0)
    {
    }

    yaooc_date_time_ctor_hms(int h,int min,int s)
    {
      M(this,set_hms,h,min,s);
    }

    yaooc_date_time_ctor_tm(const struct tm* tm) : yaooc_object()
    {
      struct tm tm2;
      memcpy(&tm2,tm,sizeof(struct tm));
      this->time_=mktime(&tm2);
    }

    yaooc_date_time_ctor_ccs(const char* str)
    {
    }

  table:
    void swap(pointer p)
    {
      yaooc_date_time_pointer other=p;
      SWAP(time_t,this->time_,other->time_);
    }

    void set(time_t t)
    {
      this->time_=t;
    }

    void set_ymdhms(int y,int mon,int d,int h,int min,int s)
    {
      struct tm tm;
      memset(&tm,0,sizeof(struct tm));
      tm.tm_year = y-1900;
      tm.tm_mon = mon-1;
      tm.tm_mday = d;
      tm.tm_hour = h;
      tm.tm_min = min;
      tm.tm_sec = s;
      this->time_=mktime(&tm);
    }

    void set_ymd(int y,int mon,int d,int h,int min,int s)
    {
      M(this,set_ymdhms,y,mon,d,0,0,0);
    }

    void set_hms(int h,int min,int s)
    {
      struct tm tm;
      time_t t=time(NULL);
      localtime_r(&t,&tm);
      tm.tm_hour=h;
      tm.tm_min=min;
      tm.tm_sec=s;
      this->time_=mktime(&tm);
    }

    time_t get() const { return this->time_; }

    int month() const
    {
      return localtime(&this->time_)->tm_mon+1;
    }

    int day() const
    {
      return localtime(&this->time_)->tm_mday;
    }

    int year() const
    {
      return localtime(&this->time_)->tm_year+1900;
    }

    int hour() const
    {
      return localtime(&this->time_)->tm_hour;
    }

    int minute() const
    {
      return localtime(&this->time_)->tm_min;
    }

    int second() const
    {
      return localtime(&this->time_)->tm_sec;
    }

    int day_of_week() const
    {
      return localtime(&this->time_)->tm_wday;
    }

    int day_of_year() const
    {
      return localtime(&this->time_)->tm_yday;
    }

    char* strftime(const char* fmt)
    {
      char* buf=new_array(char,64);
      strftime(buf,64,fmt,localtime(&this->time_));
      return buf;
    }
  instance:
    time_t time_;
};
