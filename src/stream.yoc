%header_directory yaooc
%include <yaooc/object.yod>

%header
#include <stdio.h>
void throw_stream_exception(pointer,const char*);
%%
#include <string.h>

%class yaooc_base_stream : yaooc_object
{
		yaooc_base_stream()
    {
      this->handle_=NULL;
    }

    ~yaooc_base_stream() = delete;

    yaooc_base_stream(src) = delete;

    operator=(src) = delete;

    int operator<=>(lhs,rhs) = delete;

	table:
		bool eof() const
    {
      return this->handle_ ? feof(this->handle_) : true;
    }

		bool seek(size_t ofs,int whence)
    {
      return fseek(this->handle_,ofs,whence) == 0;
    }

		size_t tell() const
    {
      return ftell(this->handle_);
    }

		bool good() const
    {
      return this->handle_ != NULL;
    }

	instance:
		FILE* handle_;

	adjunct:
		void set_handle(FILE* h)
    {
      this->handle_=h;
    }
};

%class yaooc_istream : yaooc_base_stream
{
		yaooc_istream()
    {
      yaooc_base_stream_default_ctor(this);
    }
    ~yaooc_istream() = delete;

    yaooc_istream(src) = delete;

    operator=(src) = delete;

	table:
		void stream(...)
    {
      void* ptr;
      while((ptr = va_arg(args,pointer)) != NULL) {
        memory_header_t* smh=get_memory_header(ptr);
        from_stream from_s = get_from_stream(get_type_info(ptr));
        if(from_s) {
          if(smh->n_elem_==(size_t)-1) {
            ptr=va_arg(args,pointer);
            from_s(ptr,this);
          } else {
            from_s(ptr,this);
          }
        } else
          throw_stream_exception(this,"from_stream");
      }
    }

    int peek()
    {
      int c=0;
      if(this->handle_) {
        c=fgetc(this->handle_);
        ungetc(c,this->handle_);
      }
      return c;
    }

		int scanf(const char* fmt,...)
    {
      int ret=M(this,vscanf,fmt,args);
      return ret;
    }

		int vscanf(const char* fmt,va_list args)
    {
      return vfscanf(this->handle_,fmt,args);
    }

		size_t read(void* buffer,size_t size,size_t count)
    {
      return fread(buffer,size,count,this->handle_);
    }

		char* getstr(char *buffer,size_t n)
    {
      return fgets(buffer,n,this->handle_);
    }
};

%class yaooc_ostream : yaooc_base_stream
{
		yaooc_ostream()
    {
      yaooc_base_stream_default_ctor(this);
    }
    ~yaooc_ostream() = delete;

    yaooc_ostream(src) = delete;

    operator=(src) = delete;

	table:
		void stream(...)
    {
      const void* ptr;
      while((ptr = va_arg(args,const_pointer)) != NULL) {
        memory_header_t* smh=get_memory_header(ptr);
        to_stream to_s = get_to_stream(smh->type_info_);
        if(to_s) {
          if(smh->n_elem_==(size_t)-1) { // POD and next object in stream is actual value
            if(smh->type_info_==yaooc_ccs_ti) {
              ptr=va_arg(args,const char*);
              to_s(ptr,this);
            } else if(smh->type_info_==int_ti || smh->type_info_==char_ti || smh->type_info_==short_ti) {
              int_t v=va_arg(args,int_t);
              to_s(&v,this);
            } else if(smh->type_info_==uint_ti || smh->type_info_==uchar_ti || smh->type_info_==ushort_ti) {
              uint_t v=va_arg(args,uint_t);
              to_s(&v,this);
            } else if(smh->type_info_==double_ti) {
              double v=va_arg(args,double);
              to_s(&v,this);
            } else if(smh->type_info_==long_ti) {
              long_t v=va_arg(args,long_t);
              to_s(&v,this);
            } else if(smh->type_info_==ulong_ti) {
              ulong_t v=va_arg(args,ulong_t);
              to_s(&v,this);
            } else if(smh->type_info_==size_ti) {
              ulong_t v=va_arg(args,size_t);
              to_s(&v,this);
            } else { /* Static object */
              ptr = va_arg(args,pointer);
              to_s(ptr,this);
            }
          } else { // dynamic object
            to_s(ptr,this);
          }
        } else {
          throw_stream_exception(this,"to_stream");
        }
      }
    }

		int printf(const char* fmt,...)
    {
      int ret=M(this,vprintf,fmt,args);
      return ret;
    }

		int vprintf(const char* fmt,va_list args)
    {
      return vfprintf(this->handle_,fmt,args);
    }

		size_t write(const void* buffer,size_t size,size_t count)
    {
      return fwrite(buffer,size,count,this->handle_);
    }

		int putstr(const char* str)
    {
      return fputs(str,this->handle_);
    }

		int putchr(int c)
    {
      return fputc(c,this->handle_);
    }
};

%header
extern yaooc_istream_pointer cin;
extern yaooc_ostream_pointer cout;
extern yaooc_ostream_pointer cerr;

#define STREAM(S,...) M(S,stream,__VA_ARGS__,NULL)
#define OSTREAM STREAM
#define ISTREAM STREAM

#define __S_OBJ(ti) ((memory_header_t){ .type_info_=ti , .n_elem_=(size_t)-1 }).ptr_
#define S_OBJ(T) __S_OBJ(T ## _ti)
#define O_OBJ(T,O) S_OBJ(T),&O
#define O_CHR(c) S_OBJ(char),c
#define O_UCHR(uc) S_OBJ(uchar),uc
#define O_SHORT(s) S_OBJ(short),s
#define O_USHORT(us) S_OBJ(ushort),us
#define O_INT(i) S_OBJ(int),i
#define O_UINT(ui) S_OBJ(uint),ui
#define O_LONG(l) S_OBJ(long),l
#define O_ULONG(ul) S_OBJ(ulong),ul
#define O_SIZE(sz) S_OBJ(size),sz
#define O_DOUBLE(d) S_OBJ(double),d
#define O_CCS(ccs) S_OBJ(yaooc_ccs),ccs

#define I_OBJ(T,O) S_OBJ(T),&O
#define I_CHR(c) I_OBJ(char,c)
#define I_UCHR(uc) I_OBJ(uchar,uc)
#define I_SHORT(s) I_OBJ(short,s)
#define I_USHORT(us) I_OBJ(ushort,us)
#define I_INT(i) I_OBJ(int,i)
#define I_UINT(ui) I_OBJ(uint,ui)
#define I_LONG(l) I_OBJ(long,l)
#define I_ULONG(ul) I_OBJ(ulong,ul)
#define I_SIZE(sz) I_OBJ(size,sz)
#define I_DOUBLE(d) I_OBJ(double,d)
#define I_CCS(ccs) S_OBJ(yaooc_ccs),ccs

#ifdef _WIN32
#define endl O_CCS("\r\n")
#else
#define endl O_CHR('\n')
#endif
#define ends O_CHR(0)
%%

#define POD_TO_FROM_STREAM(N,FMT) \
void N ## _to_stream(const_pointer p,pointer s) \
{ \
	yaooc_ostream_pointer strm=s; \
	M(strm,printf,FMT,*(N ## _t*) p); \
}\
\
void N ## _from_stream(pointer p,pointer s) \
{ \
	yaooc_istream_pointer strm=s; \
	M(strm,scanf,FMT,p);\
}

POD_TO_FROM_STREAM(char,"%c")
POD_TO_FROM_STREAM(uchar,"%uc")
POD_TO_FROM_STREAM(short,"%hd")
POD_TO_FROM_STREAM(ushort,"%hu")
POD_TO_FROM_STREAM(int,"%d")
POD_TO_FROM_STREAM(uint,"%u")

#if __WORDSIZE == 64
POD_TO_FROM_STREAM(long,"%ld")
POD_TO_FROM_STREAM(ulong,"%lu")
#else
POD_TO_FROM_STREAM(long,"%lld")
POD_TO_FROM_STREAM(ulong,"%llu")
#endif
//POD_TO_FROM_STREAM(double,"%lf")
void double_to_stream(const_pointer p,pointer s)
{
	yaooc_ostream_pointer strm=s;
	M(strm,printf,"%lg",*(double*) p);
}

void double_from_stream(pointer p,pointer s)
{
	yaooc_istream_pointer strm=s;
	M(strm,scanf,"%lg",p);
}
//POD_TO_FROM_STREAM(pointer,"%p")
//POD_TO_FROM_STREAM(yaooc_ccs,"%s")
POD_TO_FROM_STREAM(size,"%zu")

void yaooc_ccs_to_stream(const_pointer p,pointer s)
{
	yaooc_ostream_pointer strm=s;
	M(strm,printf,"%s",p);
}

void yaooc_ccs_from_stream(pointer p,pointer s)
{
	yaooc_istream_pointer strm=s;
	M(strm,scanf,"%s",p);
}

static yaooc_istream_t __cin = { .class_table_=&yaooc_istream_class_table,.handle_=NULL };
yaooc_istream_pointer cin = &__cin;
static yaooc_ostream_t __cout = { .class_table_=&yaooc_ostream_class_table,.handle_=NULL };
yaooc_ostream_pointer cout = &__cout;
static yaooc_ostream_t __cerr = { .class_table_=&yaooc_ostream_class_table,.handle_=NULL };
yaooc_ostream_pointer cerr = &__cerr;

__attribute__((constructor))
void init_streams()
{
	__cin.handle_ = stdin;
	__cout.handle_ = stdout;
	__cerr.handle_ = stderr;
}
