/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%prefix_directory yaooc

%include <yaooc/object.yod>

%header
#include <yaooc/stream.h>
%%
#include <math.h>
#include <ctype.h>

%class yaooc_complex : yaooc_object {

    operator<<(ostrm)
    {
      M(ostrm,printf,"(%lg %c %lgi)",this->real_,(this->imag_ < 0 ? '-' : '+'),fabs(this->imag_));
    }

    yaooc_complex_ctor_r_i(double r,double i) : yaooc_object()
    {
      this->real_=r;
      this->imag_=i;
    }

  instance:
    double real_;
    double imag_;

  table:
    void swap(pointer o)
    {
      yaooc_complex_t* other=o;
      SWAP(double,this->real_,other->real_);
      SWAP(double,this->imag_,other->imag_);
    }

    void set(double r,double i)
    {
      this->real_=r;
      this->imag_=i;
    }

    void set_polar(double magnitude,double angle)
    {
      this->real_=magnitude*cos(angle);
      this->imag_=magnitude*sin(angle);
    }

    yaooc_complex_t* times(yaooc_complex_t* o)
    {
      yaooc_complex_t* ret = new_copy_static(yaooc_complex,this);
      M(ret,times_,o);
      return ret;
    }

    void times_(yaooc_complex_t* other)
    {
      double temp=this->real_*other->real_ - this->imag_*other->imag_;
      this->imag_=this->imag_*other->real_ + this->real_*other->imag_;
      this->real_=temp;
    }

    yaooc_complex_t* divided_by(yaooc_complex_t* o)
    {
      yaooc_complex_t* ret = new_copy_static(yaooc_complex,this);
      M(ret,divided_by_,o);
      return ret;
    }

    void divided_by_(yaooc_complex_t* o)
    {
      yaooc_complex_t temp = *o;
      temp.imag_=-temp.imag_;
      M(this,times_,&temp);
      double divisor=temp.real_*temp.real_+temp.imag_*temp.imag_;
      this->real_/=divisor;
      this->imag_/=divisor;
    }

    yaooc_complex_t* plus(yaooc_complex_t* o)
    {
      yaooc_complex_t* ret = new_copy_static(yaooc_complex,this);
      M(ret,plus_,o);
      return ret;
    }

    void plus_(yaooc_complex_t* o)
    {
      this->real_+=o->real_;
      this->imag_+=o->imag_;
    }

    yaooc_complex_t* minus(yaooc_complex_t* o)
    {
      yaooc_complex_t* ret = new_copy_static(yaooc_complex,this);
      M(ret,minus_,o);
      return ret;
    }

    void minus_(yaooc_complex_t* o)
    {
      this->real_-=o->real_;
      this->imag_-=o->imag_;
    }

    double magnitude() const
    {
      return sqrt(this->real_*this->real_ + this->imag_*this->imag_);
    }

    double direction() const
    {
      double ret=atan2(this->imag_,this->real_);
      if(ret<0)
        ret += 2*M_PI;
      return ret;
    }

};
