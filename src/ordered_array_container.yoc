/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%header_directory yaooc
%include <yaooc/array_container.yod>

%header
typedef struct {
	yaooc_private_iterator position_;	// position at which it was found.  If found_ is false, indicates position to insert item
	bool found_;			// indicates if item found
} yaooc_ordered_array_container_find_result_t;
%%

%class yaooc_ordered_array_container : yaooc_array_container {

  adjunct:
    yaooc_ordered_array_container_find_result_t find_protected(const_pointer value) const
    {
      yaooc_ordered_array_container_find_result_t ret;
      ret.found_=false;
      ret.position_=AT(this,0);
    //  size_t element_size=TYPE_SIZE(this);
      size_t lower=0,upper=SIZE(this)-1,middle=0,position=0;
      rich_compare rich_cmp=get_rich_compare(this->type_info_);
      while(lower <= upper && upper != (size_t)-1) {
        middle=(lower+upper)>>1;
        pointer middle_ptr=AT(this,middle);
        if(rich_cmp(middle_ptr,value) < 0) {
          lower=middle+1;
          position=lower;
        } else if(rich_cmp(middle_ptr,value) > 0) {
          upper=middle-1;
          position=middle;
        } else {
          ret.found_=true;
          /*
            Make sure value found is the first in container
          */

          while(middle > 0) {
            middle--;
            if(rich_cmp(AT(this,middle),value)!=0) {
              middle++;
              break;
            }
          }
          position=middle;
          break;
        }
      }
      ret.position_=AT(this,position);
      return ret;
    }

    iterator find(const_pointer value) const
    {
      yaooc_ordered_array_container_find_result_t fr=yaooc_ordered_array_container_find_protected(this,value);
      return fr.found_ ? fr.position_ : END(this);
    }

    /*
      Since this is an ordered array.  pos is ignored.  Keep it as argument so it is compatible with
      other containers.
    */
    iterator insert(const_iterator pos,const_pointer value)
    {
      yaooc_ordered_array_container_find_result_t ret=yaooc_ordered_array_container_find_protected(this,value);
      return yaooc_array_container_insertn(this,ret.position_,1,value);
    }

    iterator insertn(const_iterator pos,size_t n,const_pointer value)
    {
      yaooc_ordered_array_container_find_result_t ret=yaooc_ordered_array_container_find_protected(this,value);
      return yaooc_array_container_insertn(this,ret.position_,n,value);
    }

    iterator insert_range(const_iterator pos,const_iterator f,const_iterator l)
    {
      yaooc_private_iterator first=(yaooc_private_iterator)f;
      yaooc_private_iterator last=(yaooc_private_iterator)l;
      size_t index=(size_t)-1;
      for(;first!=last;first+=TYPE_SIZE(this)) {
        iterator temp=yaooc_ordered_array_container_insert(this,pos,first);
        if(index == (size_t)-1)
          index=INDEX(this,temp);
      }
      return AT(this,index == (size_t)-1 ? SIZE(this) : index);
    }

    size_t erase_value(const_pointer value)
    {
      size_t ret=0;
      yaooc_ordered_array_container_find_result_t fr=yaooc_ordered_array_container_find_protected(this,value);
      if(fr.found_) {
        rich_compare rich_cmp=get_rich_compare(TYPE_INFO(this));
        yaooc_private_const_iterator first=fr.position_;
        yaooc_private_const_iterator last=fr.position_+TYPE_SIZE(this);
        while(last < END(this)) {
          if(rich_cmp(fr.position_,value)<0)
            break;
          last+=TYPE_SIZE(this);
        };
        ret=DISTANCE(TYPE_INFO(this),first,last);
        yaooc_array_container_erase_range(this,first,last);
      }
      return ret;
    }

    void resize_value(size_t n,const_pointer value)
    {
      if(n<SIZE(this)) {
        yaooc_array_container_erase_range(this,AT(this,n),END(this));
      } else {
        yaooc_ordered_array_container_find_result_t fr=yaooc_ordered_array_container_find_protected(this,value);
        yaooc_array_container_insertn(this,fr.position_,n-SIZE(this),value);
      }
    }

    void resize(size_t n)
    {
      yaooc_private_pointer temp=__new_array(TYPE_INFO(this),1);
      yaooc_ordered_array_container_resize_value(this,n,temp);
      delete(temp);
    }

};
