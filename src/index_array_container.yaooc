/*
		Copyright (C) 2016-2020  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%include <yaooc/array_container.yaooh>
%header_prefix yaooc

%header
#include <yaooc/uint24.h>
typedef yaooc_uint24_t yaooc_index_array_container_index_t;
typedef struct {
  // If found, lower_index to upper_index of index array of found item.
  // If not found, index in ordered index array of where insertion should occur
	size_t lower_index_;
  size_t upper_index_;
	bool found_;		// indicates whether found
} yaooc_index_array_container_find_result_t;
%%

#include <string.h>
#include <stdio.h>

int cmp_size_t(const void* a,const void* b)
{
  if(*(size_t*)a < *(size_t*)b)
    return -1;
  if(*(size_t*)a > *(size_t*)b)
    return 1;
  return 0;
}


%class yaooc_index_array_container : yaooc_array_container
{
    yaooc_index_array_container() = delete;

    yaooc_index_array_container_ctor_ti(const type_info_t* ti) : yaooc_array_container_ctor_ti(ti)
    {
      this->indexes_=NULL;
    }

    ~yaooc_index_array_container()
    {
      if(this->indexes_ != NULL)
        FREE(this->indexes_);
    }

    yaooc_index_array_container(src) : yaooc_index_array_container_ctor_ti(TYPE_INFO(src))
    {
      yaooc_index_array_container_assign(this,src);
    }

    operator=(src)
    {
      yaooc_array_container_assign(this,src);
      memcpy(this->indexes_,src->indexes_,this->size_*sizeof(yaooc_index_array_container_index_t));
    }

  instance:
    yaooc_index_array_container_index_t* indexes_;

  table:
    bool increase_capacity(size_t n)
    {
      bool ret=super();
      if(ret) {
        this->indexes_=REALLOC(this->indexes_,CAPACITY(this)*sizeof(yaooc_index_array_container_index_t));
      }
      return ret;
    }

  adjunct:
    yaooc_index_array_container_find_result_t find_protected(const_pointer value) const
    {
      yaooc_index_array_container_find_result_t ret = { 0, 0, false };
      size_t lower=0,upper=this->size_-1,middle;
      rich_compare rich_cmp=get_rich_compare(this->type_info_);
      while(lower <= upper && upper != (size_t)-1) {
        middle=(lower+upper)>>1;
        const_pointer middle_value=AT_I(this,middle);
        int rc = rich_cmp(middle_value,value);
        if(rc < 0) {
          lower=middle+1;
          ret.lower_index_=lower;
        } else if(rc > 0) {
          upper=middle-1;
          ret.lower_index_=middle;
        } else {
          /*
            Find the range of element in container
          */
          size_t idx=middle-1;
          for(;idx>=0 && idx != (size_t)-1;idx--) {
            if(rich_cmp(AT_I(this,idx),value)<0)
              break;
          }
          ret.lower_index_=idx+1;
          for(idx=middle+1;idx<SIZE(this);idx++) {
            if(rich_cmp(value,AT_I(this,idx))<0)
              break;
          }
          ret.upper_index_=idx-1;
          ret.found_=true;
          break;
        }
      }
      return ret;
    }

    void insert_index(size_t pos,size_t n,size_t value,size_t size)
    {
      size_t i;
      size_t n_ge_value=size-value;
      for(i=0;i<size && n_ge_value>0;i++) {
        uint32_t temp=yaooc_uint24_to_uint32(this->indexes_+i);
        if(temp >= value) {
          yaooc_uint24_from_uint32(this->indexes_+i,temp+n);
          n_ge_value--;
        }
      }
      memmove(this->indexes_+pos+n,this->indexes_+pos,(size -pos)*sizeof(yaooc_index_array_container_index_t));
      for(i=0;i<n;i++,pos++)
        yaooc_uint24_from_uint32(this->indexes_+pos,value++);
    }

    void remove_index(size_t pos,size_t n)
    {
      size_t i,j;
      size_t lower=pos;
      size_t upper=pos+n;
      size_t new_size=SIZE(this)-1;
      for(j=lower;j<upper;j++) {
        size_t n_gt_index=new_size-yaooc_uint24_to_uint32(this->indexes_+j);
        for(i=0; i<lower && n_gt_index > 0;i++) {
          uint32_t temp=yaooc_uint24_to_uint32(this->indexes_+i);
          if(temp > yaooc_uint24_to_uint32(this->indexes_+j)) {
            yaooc_uint24_from_uint32(this->indexes_+i,--temp);
            n_gt_index--;
          }
        }
        for(i=j+1; i<SIZE(this) && n_gt_index > 0;i++) {
          uint32_t temp=yaooc_uint24_to_uint32(this->indexes_+i);
          if(temp > yaooc_uint24_to_uint32(this->indexes_+j)) {
            yaooc_uint24_from_uint32(this->indexes_+i,--temp);
            n_gt_index--;
          }
        }
        new_size--;
      }
      memmove(this->indexes_+pos,this->indexes_+pos+n,(SIZE(this)-pos-n)*sizeof(yaooc_index_array_container_index_t));
    }

     /*
      When removing a range, after first removal, indexes are renumber so that next removal is for the
      same index. ** FIX ME ** develop a better algorithm
     */
    void remove_fixed_index(size_t value,size_t n)
    {
      size_t i,j;
      size_t save_size=SIZE(this);
      for(j=0;j<n;j++) {
        for(i=0;i<SIZE(this);i++) {
          if(value == yaooc_uint24_to_uint32(this->indexes_+i))
            break;
        }
        yaooc_index_array_container_remove_index(this,i,1);
        this->size_--;
      }
      this->size_=save_size;
    }

    iterator insert(const_iterator pos,const_pointer value)
    {
      return yaooc_index_array_container_insertn(this,pos,1,value);
    }

    iterator insertn(const_iterator pos,size_t n,const_pointer val)
    {
      size_t cur_size=SIZE(this);
      size_t idx=INDEX(this,pos);
      yaooc_index_array_container_find_result_t fr=yaooc_index_array_container_find_protected(this,val);
      iterator ret=yaooc_array_container_insertn(this,pos,n,val);
      yaooc_index_array_container_insert_index(this,fr.lower_index_,n,idx,cur_size);
      return ret;
    }

    iterator insert_range(const_iterator pos,const_iterator f,const_iterator l)
    {
      size_t idx=INDEX(this,pos);
      yaooc_private_const_iterator first=f;
      yaooc_private_const_iterator last=l;
      for(;first < last;first+=TYPE_SIZE(this),idx++) {
        yaooc_index_array_container_find_result_t fr=yaooc_index_array_container_find_protected(this,first);
        size_t cur_size=SIZE(this);
        yaooc_array_container_insert(this,AT(this,idx),first);
        yaooc_index_array_container_insert_index(this,fr.lower_index_,1,idx,cur_size);
      }
      return AT(this,idx);
    }

    iterator find(const_pointer value) const
    {
      yaooc_index_array_container_find_result_t fr=yaooc_index_array_container_find_protected(this,value);
      return fr.found_ ? AT_I(this,fr.lower_index_) : END(this);
    }

    iterator erase(const_iterator pos)
    {
      return yaooc_index_array_container_erase_range(this,pos,((yaooc_private_const_iterator)pos)+TYPE_SIZE(this));
    }

    size_t erase_value(const_pointer value)
    {
      size_t n_del=0;
      yaooc_index_array_container_find_result_t fr=yaooc_index_array_container_find_protected(this,value);
      if(fr.found_) {
        size_t i,j;
        n_del = fr.upper_index_-fr.lower_index_+1;
        size_t * indexes=__new_array(size_ti,n_del);
        for(j=0,i=fr.lower_index_;i<=fr.upper_index_;j++,i++) {
          indexes[j]=yaooc_uint24_to_uint32(this->indexes_+i);
        }
        qsort(indexes,n_del,sizeof(size_t),cmp_size_t);
        yaooc_index_array_container_remove_index(this,fr.lower_index_,n_del);
        for(j=n_del-1;j>=0 && j!=(size_t)-1;j--)
          yaooc_array_container_erase_range(this,AT(this,indexes[j]),AT(this,indexes[j]+1));
        delete(indexes);
      }
      return n_del;
    }

    iterator erase_range(const_iterator f,const_iterator l)
    {
      size_t n=DISTANCE(TYPE_INFO(this),f,l);
      size_t idx=INDEX(this,f);
      yaooc_index_array_container_remove_fixed_index(this,idx,n);
      return yaooc_array_container_erase_range(this,f,l);
    }

    void resize_value(size_t n,const_pointer value)
    {
      if(n<SIZE(this)) {
        yaooc_index_array_container_erase_range(this,AT(this,n),END(this));
      } else {
        yaooc_index_array_container_insertn(this,END(this),n-SIZE(this),value);
      }
    }

    void resize(size_t n)
    {
      pointer temp=__new_array(TYPE_INFO(this),1);
      yaooc_index_array_container_resize_value(this,n,temp);
      delete(temp);
    }

    void shrink_to_fit()
    {
      size_t old_capacity=this->capacity_;
      yaooc_array_container_shrink_to_fit(this);
      if(this->capacity_ != old_capacity)
        this->indexes_=REALLOC(this->indexes_,this->capacity_*sizeof(yaooc_index_array_container_index_t));
    }

    void reserve(size_t n)
    {
      size_t old_capacity=this->capacity_;
      yaooc_array_container_reserve(this,n);
      if(this->capacity_ != old_capacity)
        this->indexes_=REALLOC(this->indexes_,this->capacity_*sizeof(yaooc_index_array_container_index_t));
    }

    iterator yaooc_index_array_container_at_i(const_pointer p,size_t i)
    {
      return AT_I(this,i);
    }


};

%header
#define AT_I(p,i) AT(p,yaooc_uint24_to_uint32(((yaooc_index_array_container_const_pointer)(p))->indexes_+i))
%%
