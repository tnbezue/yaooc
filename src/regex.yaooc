/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%include <yaooc/object.yod>
%include <yaooc/exception.yod>
%prefix_directory yaooc

%header
#include <yaooc/string.h>

#ifdef __YAOOC_USE_TRE__
#include <tre/regex.h>
#else
#include <regex.h>
#endif

/*
	Utility for determining if string should be considered a regular expression.
  If so, break into regex string and flags
	String is a regular expression if:
		a) begins with '/'
		b) ends with '/' and optional flags 'm' (match newline) and 'i' (ignore case)

	General format is:
		/re_str/mi  -- m and i are optional

	Example:
		1) "/apple"  -- Invalid -- does not end with '/'
		2) "/apple/" -- Valid
		3) "/apple/mi" -- Valid -- ends with '/' and valid flags
		3) "/apple/iiimmmiimmmi" -- Valid -- flags can be repeated
		4) "/apple/xmi" -- Invalid -- 'x' is an invalid flag
		5) "//mi"  -- Invalid -- re_str length should be greater than 0
*/
yaooc_struct_forward(yaooc_regex_pattern_info);
bool yaooc_regex_parse_pattern(const char*,yaooc_regex_pattern_info_t*);

int yaooc_regex_regexec(const regex_t* re,const char* subject,int ofs,size_t n_ov,regmatch_t* ov,int eflags);
%%

#include <yaooc/regex.h>
#include <string.h>
#include <stdio.h>

%struct yaooc_regex_pattern_info {
  instance:
    char* pattern_;  // Will be NULL if string is not an re
    int flags_;
};

bool yaooc_regex_parse_pattern(const char* pat,yaooc_regex_pattern_info_t* rei)
{
  bool ret=false;
	*rei= (yaooc_regex_pattern_info_t){ .pattern_ = NULL, .flags_ = REG_EXTENDED };
	if(pat && *pat == '/') {
		const char* end=pat+strlen(pat)-1;
		for(;end > (pat+1);end--) {
			if(*end == 'm') {
				rei->flags_ |= REG_NEWLINE;
			} else if(*end == 'i') {
				rei->flags_ |= REG_ICASE;
			} else if(*end == '/') {
				size_t n=end-pat;
				rei->pattern_=MALLOC(n);
				strncpy(rei->pattern_,pat+1,n-1);
				rei->pattern_[n-1]=0;
        ret=true;
				break;
			} else {
				break; /* Not a regular expression. */
			}
		}
	}
	return ret;
}

int yaooc_regex_regexec(const regex_t* re,const char* subject,int ofs,size_t n_ov,regmatch_t* ov,int eflags)
{
  int result=regexec(re,subject+ofs,n_ov,ov,eflags);
  if(result == 0 && ofs > 0) {
    size_t i;
    // Should be same, but check anyway
    if(n_ov > (re->re_nsub+1))
      n_ov=re->re_nsub+1;
    for(i=0;i<n_ov;i++) {
      if(ov[i].rm_so >= 0) { // negative values indicate that no information was captured
        ov[i].rm_so+=ofs;
        ov[i].rm_eo+=ofs;
      }
    }
  }
  return result;
}

%class yaooc_regex_exception : yaooc_exception {
		yaooc_regex_exception_ctor_v(int error_code,const char* fmt) = yaooc_exception_ctor_v;
};

%class yaooc_matchdata : yaooc_object {
    yaooc_matchdata()
    {
      this->ovector_=NULL;
      this->subject_=NULL;
      this->match_result_=-1;
      this->n_captures_=0;
    }

    yaooc_matchdata(src)
    {
      yaooc_matchdata_default_ctor(this);
      yaooc_matchdata_assign(this,src);
    }

    ~yaooc_matchdata()
    {
      if(this->ovector_)
        FREE(this->ovector_);
      if(this->subject_)
        FREE(this->subject_);
    }

    operator=(src)
    {
      if(this->ovector_)
        FREE(this->ovector_);
      if(this->subject_)
        FREE(this->subject_);
      this->n_captures_=src->n_captures_;
    //  this->match_flags_=src->match_flags_;
      this->match_result_=src->match_result_;
      if(src->ovector_) {
        size_t size=this->n_captures_*sizeof(regmatch_t);
        this->ovector_=MALLOC(size);
        memcpy(this->ovector_,src->ovector_,size);
      } else
        this->ovector_=NULL;
      this->subject_ = src->subject_ ? STRDUP(src->subject_) : NULL;
    }

  table:
    void swap(pointer s)
    {
      yaooc_matchdata_t* other=s;
      SWAP(regmatch_t *,this->ovector_,other->ovector_);
      SWAP(char*,this->subject_,other->subject_);
      SWAP(int,this->match_result_,other->match_result_);
      SWAP(int,this->n_captures_,other->n_captures_);
    }

    yaooc_string_pointer at(size_t i) const
    {
      yaooc_string_pointer ret=new(yaooc_string);
      if(this->ovector_  && this->match_result_==0 && i>= 0 && i < this->n_captures_) {
        if(this->ovector_[i].rm_so >= 0)
          M(ret,insertn,0,this->subject_+this->ovector_[i].rm_so,this->ovector_[i].rm_eo-this->ovector_[i].rm_so);
      }
      return ret;
    }

    yaooc_string_pointer exec(const char* str)
    {
      yaooc_string_pointer ret=new(yaooc_string);
      if(str) {
        regex_t re;
        M(ret,set,str);
    //    tre_regcomp(&re,"\\$([0-9]+)|\\$\\{([0-9]+)\\}",REG_EXTENDED);
        regcomp(&re,"\\$([0-9]+)|\\$\\{([0-9]+)\\}",REG_EXTENDED);
        regmatch_t ov[3];
        int ofs=0;
        while(regexec(&re,M(ret,c_str)+ofs,3,ov,0) == 0) {
          if((ofs !=0 || ov[0].rm_so !=0) && *(M(ret,c_str)+ofs+ov[0].rm_so-1) == '\\') {
            M(ret,erase,ofs+ov[0].rm_so-1);
            ofs+=ov[0].rm_eo-1;
          } else {
            int iov=ov[1].rm_so == -1 ? 2 : 1;
            int i=atoi(M(ret,c_str)+ofs+ov[iov].rm_so);
            printf("YY -- %d %d X%.5sX\n",iov,i,M(ret,c_str)+ofs+ov[iov].rm_so);
            const char* repstr;
            int l;
            if(i < this->n_captures_) {
              repstr=this->subject_+this->ovector_[i].rm_so;
              l=this->ovector_[i].rm_eo-this->ovector_[i].rm_so;
            } else {
              repstr="";
              l=0;
            }
            debug_printf("MM -- %d %d %d %d\n",i,ofs+ov[0].rm_so,ov[0].rm_eo-ov[0].rm_so,l);
            M(ret,replacen,ofs+ov[0].rm_so,ov[0].rm_eo-ov[0].rm_so,repstr,l);
            ofs+=l;
          }
        }
      }
      return ret;
    }

    const char* subject() const
    {
      return this->subject_;
    }

    bool good() const
    {
      return ((yaooc_matchdata_const_pointer)this)->match_result_==0;
    }

    size_t size() const
    {
      return this->match_result_==0 ? this->n_captures_ : 0;
    }

  instance:
    regmatch_t * ovector_;
    char* subject_;
    int match_result_;
    int n_captures_;
};

%class yaooc_regex : yaooc_object {
    yaooc_regex()
    {
      this->re_=NULL;
      this->pattern_=NULL;
      this->compile_flags_=0;
      this->compile_result_=-1;
    }

    yaooc_regex(src)
    {
      yaooc_regex_default_ctor(this);
      yaooc_regex_assign(this,src);
    }

    ~yaooc_regex()
    {
      if(this->re_) {
        regfree(this->re_);
        FREE(this->re_);
      }
      if(this->pattern_)
        FREE(this->pattern_);
    }

    operator=(src)
    {
      yaooc_regex_set_pattern_flags(this,src->pattern_,src->compile_flags_);
    }

    yaooc_regex_ctor_ccs_int(const char* pattern,int flags)
    {
      yaooc_regex_default_ctor(this);
      yaooc_regex_set_pattern_flags(this,pattern,flags);
    }

    yaooc_regex_ctor_ccs(const char* re_str)
    {
      yaooc_regex_pattern_info_t rei;
      if(!yaooc_regex_parse_pattern(re_str,&rei)) {
        THROW(new_ctor(yaooc_regex_exception,yaooc_regex_exception_ctor_v,61,"Invalid regular expression: %s",re_str));
      }
      yaooc_regex_set_pattern_flags(this,rei.pattern_,rei.flags_);
      FREE(rei.pattern_);
    }

  private:
    void compile()
    {
      this->re_=MALLOC(sizeof(regex_t));
      this->compile_result_=regcomp(this->re_,this->pattern_,this->compile_flags_|REG_EXTENDED);
      if(this->compile_result_ != 0) {
        regfree(this->re_);
        FREE(this->re_);
      }
    }
    bool match_private(yaooc_matchdata_pointer md,int offset)
    {
      bool ret=false;
      if(this->re_) {
        if((md->match_result_=yaooc_regex_regexec(this->re_,md->subject_,offset,md->n_captures_,md->ovector_,0)) == 0) {
          md->n_captures_=this->re_->re_nsub+1;
          ret=true;
        } else {
          /* Match failed, indicate no matches found */
    /*      free(md->ovector_);
          md->ovector_=NULL;*/
          md->n_captures_=0;
        }
      }
      return ret;
    }

	adjunct:
  table:
    void set_pattern_flags(const char* pattern,int flags)
    {
      yaooc_regex_dtor(this);
      this->compile_flags_=flags;
      this->compile_result_=-1;
      if(pattern) {
        this->pattern_=STRDUP(pattern);
        yaooc_regex_compile(this);
      }
    }

    const char* get_pattern() const
    {
      return this->pattern_;
    }

    int get_flags() const
    {
      return this->compile_flags_;
    }

    yaooc_matchdata_pointer match(const char* subject,int match_flags)
    {
      yaooc_matchdata_pointer ret=new(yaooc_matchdata);
      if(this->compile_result_==0) {
        ret->n_captures_=this->re_->re_nsub+1;
        ret->ovector_=MALLOC(sizeof(regmatch_t)*ret->n_captures_);
        ret->subject_=STRDUP(subject);
        yaooc_regex_match_private(this,ret,0);
      }
      return ret;
    }

    bool match_next(yaooc_matchdata_pointer md)
    {
      if(md->match_result_ == 0) {
        return yaooc_regex_match_private(this,md,md->ovector_[0].rm_eo);
      }
      return false;
    }

    bool good() const
    {
      return this->compile_result_==0;
    }

  instance:
    regex_t * re_;
    char* pattern_;
    int	compile_flags_;
    int compile_result_;
};

// Methods from yaooc_string that had to wait until regex was implemented
void yaooc_string_sub_(pointer p,const char* pat,const char* str)
{
  yaooc_string_t* this=p;
  if(pat) {
    yaooc_regex_pattern_info_t rmi;
    if(yaooc_regex_parse_pattern(pat,&rmi)) {
      yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,rmi.pattern_,rmi.flags_);
//			M(this,sub_re_,re,str);
      yaooc_string_sub_re_(this,re,str);
      delete(re);
      FREE(rmi.pattern_);
    } else if (strcmp(pat," ")==0) {
      yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,"\\s+",REG_EXTENDED);
      yaooc_string_sub_re_(this,re,str);
      delete(re);
    } else {
      char* ptr=strstr(this->array_,pat);
      if(ptr)
        M(this,replace,ptr-this->array_,strlen(pat),str);
    }
  }
}

void yaooc_string_sub_re_(pointer p,yaooc_regex_const_pointer re,const char *str)
{
  yaooc_string_pointer this=p;
	regmatch_t ov;
	if(yaooc_regex_regexec(re->re_,this->array_,0,1,&ov,0) == 0) {
		M(this,replace,ov.rm_so,ov.rm_eo-ov.rm_so,str);
	}
}

void yaooc_string_gsub_(pointer p,const char* pat,const char* str)
{
	yaooc_string_pointer this=p;
	size_t sl= str ? strlen(str) : 0;
	if(pat) {
		yaooc_regex_pattern_info_t rmi;
    if(yaooc_regex_parse_pattern(pat,&rmi)) {
			yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,rmi.pattern_,rmi.flags_);
			yaooc_string_gsub_re_(this,re,str);
			delete(re);
			FREE(rmi.pattern_);
		} else if(strcmp(pat," ")==0) {
			yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,"\\s+",REG_EXTENDED);
			yaooc_string_gsub_re_(this,re,str);
			delete(re);
		} else {
			size_t l=strlen(pat);
			char* ptr;
			size_t ofs=0;
			while((ptr=strstr(this->array_+ofs,pat))!=NULL) {
				size_t pos=ptr-this->array_;
				M(this,replace,pos,l,str);
				ofs=pos+sl;
			}
		}
	}
}

void yaooc_string_gsub_re_(pointer p,yaooc_regex_const_pointer re,const char* str)
{
	yaooc_string_pointer this=p;
	regmatch_t ov;
	size_t ofs=0;
	size_t l=strlen(str);
	while(ofs < this->size_ && yaooc_regex_regexec(re->re_,this->array_,ofs,1,&ov,0) == 0) {
		M(this,replace,ov.rm_so,ov.rm_eo-ov.rm_so,str);
		ofs=ov.rm_so+l;
	}
}


bool yaooc_string_match(const_pointer p,const char* pat)
{
	yaooc_string_const_pointer this=p;
	bool ret=true;
	if(pat) {
		yaooc_regex_pattern_info_t rmi;
    if(yaooc_regex_parse_pattern(pat,&rmi)) {
			yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,rmi.pattern_,rmi.flags_);
			ret = yaooc_string_match_re(this,re);
			delete(re);
			FREE(rmi.pattern_);
		} else {
			ret = strstr(this->array_,pat) != NULL;
		}
	}
	return ret;
}

bool yaooc_string_match_re(const_pointer p,yaooc_regex_const_pointer re)
{
	yaooc_string_const_pointer this=p;
	return yaooc_regex_regexec(re->re_,this->array_,0,0,NULL,0) == 0;
}

extern const char* yaooc_whitespace;
yaooc_string_vector_pointer yaooc_string_split(const_pointer p,const char* str,size_t max)
{
  yaooc_string_const_pointer this=p;
  yaooc_string_vector_t* ret=NULL; //new(yaooc_string_vector);
	if(str) {
		yaooc_regex_pattern_info_t rmi;
    if(yaooc_regex_parse_pattern(str,&rmi)) {
			yaooc_regex_t* re = new_ctor(yaooc_regex,yaooc_regex_ctor_ccs_int,rmi.pattern_,rmi.flags_);
			ret = yaooc_string_split_re(p,re,max);
			delete(re);
			FREE(rmi.pattern_);
		} else {
			ret=new(yaooc_string_vector);
			char *beg,*end;
			size_t l=strlen(str);
			yaooc_string_t* temp=new(yaooc_string);
			if(strcmp(str," ")==0) {
				beg=this->array_;
				do {
					beg+=strspn(beg,yaooc_whitespace);
					size_t ofs=strcspn(beg,yaooc_whitespace);
					M(temp,setn,beg,ofs);
					M(ret,push_back,temp);
					beg+=ofs;
				} while(*beg!=0);
			} else {
				beg=this->array_;
				while((end=strstr(beg,str)) && --max > 0) {
					M(temp,setn,beg,end-beg);
					beg=end+l;
					M(ret,push_back,temp);
				}
			}
			if(*beg != 0) {
				M(temp,set,beg);
				M(ret,push_back,temp);
			}
			delete(temp);
		}
		/*
			Remove null items at end
		*/
		while(M(ret,size)>0 && M(M(ret,back),size)==0)
			M(ret,pop_back);
	}
  return ret ? ret : new(yaooc_string_vector);
}

yaooc_string_vector_pointer yaooc_string_split_re(const_pointer p,yaooc_regex_const_pointer re,size_t max)
{
  yaooc_string_const_pointer this=p;
  yaooc_string_vector_pointer ret=new(yaooc_string_vector);
//  regex_t re;
  regmatch_t rm;
//  if(regcomp(re->re_,re_str,REG_EXTENDED|flags)==0) {
	if(re && re->re_) {
    yaooc_string_t* temp=new(yaooc_string);
    char* beg=this->array_;
    while(yaooc_regex_regexec(re->re_,beg,0,1,&rm,0)==0) {
      M(temp,setn,beg,rm.rm_so);
      beg+=rm.rm_eo;
      M(ret,push_back,temp);
    }
    if(*beg != 0) {
      M(temp,set,beg);
      M(ret,push_back,temp);
    }
//    regfree(&re);
    delete(temp);
  }
  return ret;
}
