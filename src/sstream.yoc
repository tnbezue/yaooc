/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%include <yaooc/stream.yod>
%header_directory yaooc


#include <string.h>

%class yaooc_istringstream : yaooc_istream
{
    yaooc_istringstream()
    {
      yaooc_base_stream_default_ctor(this);
      this->buffer_=NULL;
    }

    ~yaooc_istringstream()
    {
      if(this->handle_) {
        fclose(this->handle_);
        this->handle_=NULL;
      }
      if(this->buffer_)
        FREE(this->buffer_);
    }

    yaooc_istringstream(src) = delete;
    operator=(src) = delete;

    yaooc_istringstream_ctor_ccs(const char* str)
    {
      yaooc_base_stream_default_ctor(this);
      yaooc_istringstream_setn(this,str,SIZE_MAX);
    }

    yaooc_istringstream_ctor_ccs_n(const char* str,size_t n)
    {
      yaooc_base_stream_default_ctor(this);
      yaooc_istringstream_setn(this,str,n);
    }

  instance:
    char* buffer_;

  table:
    void reset() {
      if(this->buffer_)
        FREE(this->buffer_);
      if(this->handle_)
        fclose(this->handle_);
      this->handle_=tmpfile();
    }

    void set(const char* str)
    {
      yaooc_istringstream_setn(this,str,SIZE_MAX);
    }

    void setn(const char* str,size_t n)
    {
      yaooc_istringstream_reset(this);
      size_t l= str ? strlen(str) : 0;
      if(n>l) n=l;
      if(n> 0) {
        this->handle_=tmpfile();
        fwrite(str,1,n,this->handle_);
        fseek(this->handle_,0,SEEK_SET);
      }
    }

    const char* c_str() const
    {
      if(this->buffer_!=NULL)
        FREE(((yaooc_istringstream_t*)this)->buffer_);
      size_t ofs = M(this,tell); //ftell(this->handle_);
      fseek(this->handle_,0,SEEK_END);
      size_t n=M(this,tell); //ftell(this->handle_);
      if(n>0) {
        fseek(this->handle_,0,SEEK_SET);
        ((yaooc_istringstream_t*)this)->buffer_=MALLOC(n+1);
        fread(this->buffer_,1,n,this->handle_);
        ((yaooc_istringstream_t*)this)->buffer_[n]=0;
      }
      fseek(this->handle_,ofs,SEEK_SET);
      return this->buffer_;
    }
};

%class yaooc_ostringstream : yaooc_ostream
{
    yaooc_ostringstream()
    {
      this->buffer_=NULL;
      this->handle_=tmpfile();
    }

    ~yaooc_ostringstream()
    {
      if(this->handle_) {
        fclose(this->handle_);
        this->handle_=NULL;
      }
      if(this->buffer_)
        FREE(this->buffer_);
    }

    yaooc_ostringstream(src) = delete;
    operator=(src) = delete;
  instance:
    char* buffer_;

  table:
    void reset()
    {
      if(this->buffer_)
        FREE(this->buffer_);
      if(this->handle_)
        fclose(this->handle_);
      this->handle_=tmpfile();
    }

    const char* c_str() const
    {
      if(this->buffer_!=NULL)
        FREE(((yaooc_ostringstream_t*)this)->buffer_);
      size_t ofs = M(this,tell); //ftell(this->handle_);
      fseek(this->handle_,0,SEEK_END);
      size_t n=M(this,tell); //ftell(this->handle_);
      if(n>0) {
        fseek(this->handle_,0,SEEK_SET);
        ((yaooc_istringstream_t*)this)->buffer_=MALLOC(n+1);
        fread(((yaooc_istringstream_t*)this)->buffer_,1,n,this->handle_);
        ((yaooc_istringstream_t*)this)->buffer_[n]=0;
      }
      fseek(this->handle_,ofs,SEEK_SET);
      return this->buffer_;
    }
};
