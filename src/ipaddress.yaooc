/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%prefix_directory yaooc
%include <yaooc/object.yaooh>

%header
#include <yaooc/stream.h>
%%

#ifdef _WIN32
#include <winsock2.h>
#include <ws2tcpip.h>
#else
#include <arpa/inet.h>
#endif
#include <yaooc/ipaddress.h>
#include <string.h>

%class yaooc_ipaddress
{

    yaooc_ipaddress()
    {
      this->type_ = 0;
      memset(this->buf_,0,16);
    }

    ~yaooc_ipaddress() = delete;

    operator=(src)
    {
      this->type_ = src->type_;
      memcpy(this->buf_,src->buf_,16);
    }

    int operator<=>(lhs,rhs)
    {
      return memcmp(lhs->buf_,rhs->buf_,lhs->type_==1 ? 4 : 16);
    }

    operator<<(ostrm)
    {
      char temp[INET6_ADDRSTRLEN];
      switch(this->type_) {

        case AF_INET:
          inet_ntop(AF_INET,(void*)this->buf_,temp,INET_ADDRSTRLEN);
          break;

        case AF_INET6:
          inet_ntop(AF_INET6,(void*)this->buf_,temp,INET6_ADDRSTRLEN);
          break;

        default:
          strcpy(temp,"(nil)");
          break;
      }
      M(ostrm,printf,temp);
    }
    yaooc_ipaddress_ctor_ccs(const char* ip_str)
    {
      M(this,set,ip_str);
    }

  instance:
    int type_;
    char buf_[16];

  table:
    void set(const char* ip_str)
    {
      this->type_=0;
      if (inet_pton(AF_INET, ip_str, (void*)this->buf_ ) == 1) {
        this->type_ = AF_INET;
      } else if (inet_pton(AF_INET6, ip_str, (void*)this->buf_ ) == 1) {
        this->type_ = AF_INET6;
      }
    }

    bool is_ip4() const
    {
      return this->type_==AF_INET;
    }

    bool is_ip6() const
    {
      return this->type_==AF_INET6;
    }

    bool is_undefined() const
    {
      return this->type_!=AF_INET && this->type_!=AF_INET6;
    }

    bool is_loopback() const
    {
      bool ret=false;
      char buf[16];
      switch(this->type_) {
        case AF_INET:
          inet_pton(AF_INET, "127.0.0.1", buf );
          ret = memcmp(this->buf_,buf,4)==0;
          break;

        case AF_INET6:
          inet_pton(AF_INET6, "::1", buf );
          ret = memcmp(this->buf_,buf,16)==0;
          break;
      }
      return ret;
    }

    int type() const
    {
      return this->type_;
    }

};
