/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

%prefix_directory yaooc
%include <yaooc/object.yod>
%include <yaooc/exception.yod>
%header
#include <yaooc/stream.h>
#include <yaooc/vector.h>
#include <yaooc/map.h>
typedef enum { JSON_UNDEFINED=0, JSON_NULL, JSON_BOOL, JSON_INTEGER, JSON_REAL, JSON_STRING,
        JSON_ARRAY, JSON_OBJECT } yaooc_json_type_t;
%%

%class yaooc_json_value_array;
%class yaooc_json_string_value_map;

%header
/*
*/
typedef union {
  bool bool_;
  int64_t int_;
  double real_;
  char* string_;
  yaooc_json_value_array_t* array_;
  yaooc_json_string_value_map_t* object_;
} json_data_t;
%%

%class yaooc_json_exception : yaooc_exception {
  yaooc_json_exception_ctor_v(int error_code,const char* fmt,...) = yaooc_exception_ctor_v;
};

%class yaooc_json_value : yaooc_object
{
  yaooc_json_value()
  {
    this->type_=JSON_UNDEFINED;
    this->real_=0;
  }

  ~yaooc_json_value()
  {
  }

  yaooc_json_value(src) = default;

  operator=(src)
  {
    if(this->type_ == JSON_UNDEFINED) {
      /* An undefined type can become any other type */
      switch(src->type_) {
        case JSON_UNDEFINED:
          break;

        case JSON_NULL:
          this->type_=JSON_NULL;
          break;

        case JSON_BOOL:
          this->type_=JSON_BOOL;
          this->bool_=src->bool_;
          break;

        case JSON_INTEGER:
          this->type_=JSON_INTEGER;
          this->int_=src->int_;
          break;

        case JSON_REAL:
          this->type_=JSON_REAL;
          this->real_=src->real_;
          break;

        case JSON_STRING:
          this->type_=JSON_STRING;
          this->string_=src->string_ ? STRDUP(src->string_) : NULL;
          break;

        case JSON_ARRAY:
          this->type_=JSON_ARRAY;
          this->array_=new(yaooc_json_value_array);
          assign_static(this->array_,src->array_,yaooc_json_value_array);
          break;

        case JSON_OBJECT:
          this->type_=JSON_OBJECT;
          this->array_=new(yaooc_json_string_value_map);
          assign_static(this->object_,src->object_,yaooc_json_string_value_map);
          break;
      }
    }
  }

  int operator<=>(lhs,rhs)
  {
    if(lhs->type_ == JSON_UNDEFINED) {
      if(rhs->type_ == JSON_UNDEFINED)
        return 0;
      return -1; // Undefined less than everything else
    } else if(rhs->type_ == JSON_UNDEFINED)
      return 1;
    return 0;  // Should not happen, both json_values
  }

  operator<<(ostrm)
  {
  }
  include polymorphic_base;
  instance:
    json_data_t;
    yaooc_json_type_t type_;

  table:
    yaooc_json_type_t type() const { return this->type_; }
};

%class yaooc_json_null : yaooc_json_value
{
  yaooc_json_null() : yaooc_json_value()
  {
    this->type_=JSON_NULL;
  }

  ~yaooc_json_null() = delete;

  yaooc_json_null(src) = default;

  operator=(src) {
    // Only allow json null to be assigned
    if(src->type_!=JSON_NULL)
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,51,"Attempt to assign non json null to json null"));
    if(this->type_==JSON_UNDEFINED)
      newp(this,yaooc_json_null);
    else if(this->type_ != JSON_NULL)
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,51,"Attempt to assign non json null to json null"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json null or json_value
    if(lhs->type_==JSON_NULL) {
      if(rhs->type_==JSON_NULL)
        return 0;
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_NULL) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,52,"Invalid comparison to JSON_NULL"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"null");
  }

  table:


};

%class yaooc_json_bool : yaooc_json_value
{
  yaooc_json_bool() : yaooc_json_value()
  {
    this->type_=JSON_BOOL;
    this->bool_=false;
  }

  ~yaooc_json_bool() = delete;

  yaooc_json_bool(src) = default;

  operator=(src) {
    // Only allow json null to be assigned
    if(src->type_==JSON_BOOL) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_bool);
      if(this->type_ != JSON_BOOL)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,53,"Attempt to assign non json bool to json bool"));
      this->bool_=src->bool_;
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,53,"Attempt to assign non json bool to json bool"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json null or json_value
    if(lhs->type_==JSON_BOOL) {
      if(rhs->type_==JSON_BOOL)
        return lhs->bool_<rhs->bool_;
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_BOOL) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Invalid comparison to JSON_BOOL"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"%s",(this->bool_ ? "true" : "false"));
  }

  yaooc_json_bool_ctor_bool(int v) : yaooc_json_bool()
  {
    this->bool_=v;
  }

  table:

  bool get() const { return this->bool_; }

  void set(bool v) { this->bool_ =v; }
};

%class yaooc_json_integer : yaooc_json_value
{
  yaooc_json_integer()
  {
    this->type_=JSON_INTEGER;
    this->int_=0;
  }

  ~yaooc_json_integer() = delete;

  yaooc_json_integer(src) = default;

  operator=(src)
  {
    if(src->type_==JSON_INTEGER) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_integer);
      if(this->type_ != JSON_INTEGER)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Attempt to assign non json integer to json integer"));
      this->int_=src->int_;
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Attempt to assign non json integer to json integer"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json null or json_value
    if(lhs->type_==JSON_INTEGER) {
      if(rhs->type_==JSON_INTEGER) {
        if(lhs->int_<rhs->int_)
          return -1;
        if(lhs->int_>rhs->int_)
          return 1;
        return 0;
      }
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_INTEGER) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,55,"Invalid comparison to json integer"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"%lld",this->int_);
  }
  yaooc_json_integer_ctor_int(int v) : yaooc_json_integer()
  {
    this->int_=v;
  }

  table:
  int64_t get() const { return this->int_; }

  void set(int64_t v) { this->int_ =v; }
};

%class yaooc_json_real : yaooc_json_value
{
  yaooc_json_real()
  {
    this->type_=JSON_REAL;
    this->real_=0;
  }

  ~yaooc_json_real() = delete;

  yaooc_json_real(src) = default;

  operator=(src)
  {
    if(src->type_==JSON_REAL) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_real);
      if(this->type_ != JSON_REAL)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,55,"Attempt to assign non json real to json real"));
      this->real_=src->real_;
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,55,"Attempt to assign non json real to json real"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json null or json_value
    if(lhs->type_==JSON_REAL) {
      if(rhs->type_==JSON_REAL) {
        if(lhs->real_<rhs->real_)
          return -1;
        if(lhs->real_>rhs->real_)
          return 1;
        return 0;
      }
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_REAL) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,55,"Invalid comparison to json real"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"%lg",this->real_);
  }
  yaooc_json_real_ctor_real(double v) : yaooc_json_real()
  {
    this->real_=v;
  }

  table:
  double get() const { return this->real_; }

  void set(double v) { this->real_ =v; }
};

%class yaooc_json_string : yaooc_json_value
{
  yaooc_json_string()
  {
    this->type_=JSON_STRING;
    this->string_=NULL;
  }

  ~yaooc_json_string()
  {
    if(this->string_!=NULL)
      FREE(this->string_);
  }

  yaooc_json_string(src) = default;

  operator=(src)
  {
    if(src->type_==JSON_STRING) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_string);
      if(this->type_ != JSON_STRING)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,56,"Attempt to assign non json string to json string"));
      deletep(this,yaooc_json_string);
      newp(this,yaooc_json_string);
      this->string_=src->string_ ? STRDUP(src->string_) : NULL;
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,56,"Attempt to assign non json string to json string"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json null or json_value
    if(lhs->type_==JSON_STRING) {
      if(rhs->type_==JSON_STRING) {
        if(lhs->string_ == NULL) {
          if(rhs->string_ == NULL)
            return 0; // NULL == NULL
          return -1; // NULL < !NULL
        }
        if(rhs->string_ == NULL)
          return 1;
        return strcmp(lhs->string_,rhs->string_);
      }
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_STRING) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,53,"Invalid comparison to json string"));
    return 0;
  }

  operator<<(ostrm)
  {
    if(this->string_)
      M(ostrm,printf,"\"%s\"",this->string_);
    else
      M(ostrm,printf,"(null)");
  }

  yaooc_json_string_ctor_ccs(const char* v) : yaooc_json_string()
  {
    this->string_ = v ? STRDUP(v) : NULL;
  }

  yaooc_json_string_ctor_ccs_size(const char* v,size_t n) : yaooc_json_string()
  {
    if(v && n > 0) {
      this->string_ = MALLOC(n+1);
      strncpy(this->string_,v,n);
      this->string_[n]=0;
    }
  }

  table:
  const char* get() const { return this->string_; }

  void set(const char* v) {
    M(this,clear);
    if(v) this->string_ = STRDUP(v);
  }

  void clear() {
    if(this->string_) {
      FREE(this->string_);
      this->string_=NULL;
    }
  }
};

%header
VECTOR_DEFINITION(yaooc_json_value,yaooc_json_value_array);
%%
VECTOR_IMPLEMENTATION(yaooc_json_value,yaooc_json_value_array);

%class yaooc_json_array : yaooc_json_value
{
  yaooc_json_array()
  {
    this->type_=JSON_ARRAY;
    this->array_=new(yaooc_json_value_array);
  }

  ~yaooc_json_array()
  {
    if(this->array_) {
      delete(this->array_);
      this->array_=NULL;
    }
  }

  yaooc_json_array(src) = default;

  operator=(src)
  {
    if(src->type_==JSON_ARRAY) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_array);
      if(this->type_!=JSON_ARRAY)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,53,"Attempt to assign non json string to json string"));
      assign_static(this->array_,src->array_,yaooc_json_value_array);
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,53,"Attempt to assign non json string to json string"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json array.  Should not really be used
    if(lhs->type_==JSON_ARRAY) {
      if(rhs->type_==JSON_ARRAY) {
        return op_rich_compare_static(lhs,rhs,yaooc_json_value_array);
      }
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_ARRAY) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Invalid comparison to json array"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"[");
    if(M(this->array_,size)>0) {
      yaooc_json_value_array_const_iterator i = M(this->array_,cbegin);
      STREAM(ostrm,O_OBJ(yaooc_json_value,*i));
      for(i++;i!=M(this->array_,cend);i++) {
        M(ostrm,printf,",");
        STREAM(ostrm,O_OBJ(yaooc_json_value,*i));
      }
    }
    M(ostrm,printf,"]");
  }
  table:

  void insert(pointer v)
  {
    M(this->array_,push_back,v);
  }

  size_t size() const
  {
    return M(this->array_,size);
  }
};

%header
MINI_MAP_DEFINITION(yaooc_json_string,yaooc_json_value,yaooc_json_string_value_map);
%%
MINI_MAP_IMPLEMENTATION(yaooc_json_string,yaooc_json_value,yaooc_json_string_value_map);

%class yaooc_json_object : yaooc_json_value
{
  yaooc_json_object()
  {
    this->type_=JSON_OBJECT;
    this->object_=new(yaooc_json_string_value_map);
  }

  ~yaooc_json_object()
  {
    delete(this->object_);
  }

  yaooc_json_object(src) = default;

  operator=(src)
  {
    if(src->type_==JSON_OBJECT) {
      if(this->type_ == JSON_UNDEFINED)
        newp(this,yaooc_json_object);
      if(this->type_ != JSON_OBJECT)
        THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Attempt to assign non json object to json object"));
      assign_static(this->object_,src->object_,yaooc_json_string_value_map);
    } else
      THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Attempt to assign non json object to json object"));
  }

  int operator<=>(lhs,rhs)
  {
    // Compare to other json array.  Should not really be used
    if(lhs->type_==JSON_OBJECT) {
      if(rhs->type_==JSON_OBJECT) {
        return 0;
      }
      if(rhs->type_==JSON_UNDEFINED)
        return 1; // greater than NULL
    } else if(rhs->type_==JSON_OBJECT) {
      if(lhs->type_==JSON_UNDEFINED)
        return -1; // greater than
    }
    THROW(new_ctor(yaooc_json_exception,yaooc_json_exception_ctor_v,54,"Invalid comparison to json object"));
    return 0;
  }

  operator<<(ostrm)
  {
    M(ostrm,printf,"{");
    yaooc_json_string_value_map_const_iterator i;
    CFOR_EACH(i,this->object_) {
      STREAM(ostrm,S_OBJ(yaooc_json_string),i->first);
      M(ostrm,printf,":");
      STREAM(ostrm,S_OBJ(yaooc_json_string),i->second);
    }
    M(ostrm,printf,"}");
  }
  table:
    void insert(const_pointer key,const_pointer value)
    {
      M(this->object_,insert,key,value);
    }
};
