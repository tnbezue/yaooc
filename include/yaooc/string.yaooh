%ifndef __STRING_YAOOH_INCLUDED__
%define __STRING_YAOOH_INCLUDED__

%include <yaooc/object.yaooh>
%class yaooc_string {
yaooc_string(){}
yaooc_string(src){

}
operator=(src){

}
instance:
char* array_;
const type_info_t* type_info_;
size_t size_;
size_t capacity_;
table:
const class_table_t* parent_class_table_;
const char* type_name_;
void swap(pointer s) =yaooc_array_container_swap;
bool increase_capacity(size_t n) =yaooc_array_container_increase_capacity;
size_t size_needed(size_t n) const{ }
size_t size() const=yaooc_array_container_size;
size_t capacity() const=yaooc_array_container_capacity;
bool empty() const=yaooc_array_container_empty;
iterator begin() =yaooc_array_container_begin;
iterator end() =yaooc_array_container_end;
const_iterator cbegin() const=yaooc_array_container_cbegin;
const_iterator cend() const=yaooc_array_container_cend;
char* at(size_t pos) { }
void reserve(size_t n) =yaooc_array_container_reserve;
void insert(size_t ipos,const char* str) { }
void insertn(size_t ipos,const char* str,size_t n) { }
void insert_chr(size_t pos,char ch) { }
void insertn_chr(size_t pos,size_t count,char ch) { }
void set(const char* str) { }
void setn(const char* str,size_t count) { }
void erase(size_t pos) { }
void erasen(size_t pos,size_t n) { }
void replace(size_t pos,size_t n,const char* str) { }
void replacen(size_t pos,size_t n,const char* str,size_t count) { }
void resize(size_t n) { }
void resize_value(size_t n,char ch) { }
void shrink_to_fit() =yaooc_array_container_shrink_to_fit;
void append(const char* str) { }
void appendn(const char* str,size_t count) { }
yaooc_string_pointer substr(size_t ipos,size_t n) const{ }
yaooc_string_pointer upcase() const{ }
void upcase_() { }
yaooc_string_pointer downcase() const{ }
void downcase_() { }
yaooc_string_pointer ltrim() const{ }
void ltrim_() { }
yaooc_string_pointer rtrim() const{ }
void rtrim_() { }
yaooc_string_pointer trim() const{ }
void trim_() { }
yaooc_string_pointer sub(const char* pat,const char* str) const{ }
void sub_(const char* pat,const char* repl_str) =yaooc_string_sub_;
yaooc_string_pointer sub_re(yaooc_regex_const_pointer re,const char* repl_str) const{ }
void sub_re_(yaooc_regex_const_pointer re,const char* repl_str) =yaooc_string_sub_re_;
yaooc_string_pointer gsub(const char* pat,const char* repl_str) const{ }
void gsub_(const char* pat,const char* str) =yaooc_string_gsub_;
yaooc_string_pointer gsub_re(yaooc_regex_const_pointer re,const char* repl_str) const{ }
void gsub_re_(yaooc_regex_const_pointer re,const char* pat) =yaooc_string_gsub_re_;
bool match(const char* pat) const=yaooc_string_match;
bool match_re(yaooc_regex_const_pointer re) const=yaooc_string_match_re;
bool starts_with(const char* str) const{ }
bool ends_with(const char* str) const{ }
void clear() { }
size_t findstr(const char* str,size_t pos) { }
size_t rfindstr(const char* str,size_t pos) { }
size_t findchr(char ch,size_t pos) { }
size_t rfindchr(char ch,size_t pos) { }
yaooc_string_vector_pointer split(const char* str,size_t max) const=yaooc_string_split;
yaooc_string_vector_pointer split_re(yaooc_regex_const_pointer re,size_t max) const=yaooc_string_split_re;
const char* c_str() const=yaooc_array_container_begin;
};

%endif
