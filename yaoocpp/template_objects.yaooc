#ifndef __YAOOCPP_TEMPLATE_OBJECTS_INCLUDED__
#define __YAOOCPP_TEMPLATE_OBJECTS_INCLUDED__

#include <yaooc/object.yaooc>

#if 0 // HEADER
#include <yaooc/string.h>
#include <yaooc/vector.h>
#include <yaooc/stream.h>
#include <yaooc/memory.h>

yaooc_struct_forward(yaoocpp_argument);
VECTOR_IMPLEMENTATION(yaoocpp_argument,yaoocpp_argument_vector);
#endif // HEADER

#if 0  // SOURCE
#include <yaooc/regex.h>
#include <yaooc/pointer_bag.h>

VECTOR_IMPLEMENTATION(yaoocpp_argument,yaoocpp_argument_vector);
#endif  // SOURCE

struct yaoocpp_argument {
    yaoocpp_argument();
    ~yaoocpp_argument();
    yaoocpp_argument(yaoocpp_argument*);
    operator=();
  instance:
    yaooc_string_t type_;
    yaooc_string_t name_;
    yaooc_string_t array_size_;
    bool is_array_;
  protected:
    void print_type(ostream_pointer o) const;
    void print_type_name(ostream_pointer o) const;
};

class yaoocpp_element : yaooc_object {
    yaoocpp_element();
    ~yaoocpp_element();
    yaoocpp_element(yaoocpp_element*);
    operator=();
    operator<=>();
  table:
    void print_class_table_definition(ostream_pointer o) const = NULL;
    void print_class_instance_definition(ostream_pointer o) const = NULL;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const = NULL;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const = NULL;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const = NULL;
  instance:
    yaooc_string_t name_;
    element_state_t state_;

  protected:

};

class yaoocpp_type : yaoocpp_element {
  table:
    void print_class_table_definition(ostream_pointer o) const;
    void print_class_instance_definition(ostream_pointer o) const = yaoocpp_type_print_class_table_definition;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const = NULL;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const = NULL;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const = NULL;
  instance:
};

class yaoocpp_variable : yaoocpp_element
{
    yaoocpp_variable();
    ~yaoocpp_variable();
    yaoocpp_variable(yaoocpp_variable*);
    operator=();
  table:
    void print_class_table_definition(ostream_pointer o) const;
    void print_class_instance_definition(ostream_pointer o) const = yaoocpp_variable_print_class_table_definition;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const;
  instance:
    yaooc_string_t type_;
    yaooc_string_t default_value_;
};

class yaoocpp_raw_struct_union : yaoocpp_element
{
		yaoocpp_raw_struct_union();
		~yaoocpp_raw_struct_union();
		yaoocpp_raw_struct_union(yaoocpp_raw_struct_union*);
		operator=();

  table:
    void print_class_table_definition(ostream_pointer o) const;
    void print_class_instance_definition(ostream_pointer o) const;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const;
	instance:
		yaooc_string_t raw_string_;
};

class yaoocpp_constructor : yaoocpp_element
{
		yaoocpp_constructor();
		~yaoocpp_constructor();
		yaoocpp_constructor(yaoocpp_constructor*);
		operator=();
  table:
    void print_class_table_definition(ostream_pointer o) const = NULL;
    void print_class_instance_definition(ostream_pointer o) const = NULL;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const = NULL;
	instance:
		yaoocpp_argument_vector_t arguments_;
		yaooc_string_t implementation_method_;
};


class yaoocpp_method : yaoocpp_constructor
{
		yaoocpp_method();
		~yaoocpp_method();
		yaoocpp_method(yaoocpp_method*);
		operator=();
  table:
    void print_class_table_definition(ostream_pointer o) const;
    void print_class_instance_definition(ostream_pointer o) const = yaoocpp_method_print_class_table_definition;
    void print_prototype(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_implementation(ostream_pointer o,const char* class_name,const char* storage_class) const;
    void print_class_table_implementation(ostream_pointer o,const char* class_name) const;

	instance:
		yaooc_string_t return_type_;
		bool is_const_;
};

class yaoocpp_container : yaooc_object
{
	yaoocpp_container();
	~yaoocpp_container();
	yaoocpp_container(yaoocpp_container*);
	operator=();
	operator<=>();
	table:
    void inherit();
    bool is_min_pod() const;
    bool is_pod() const = yaoocpp_container_is_min_pod;
		void print_to_header(ostream_pointer o) const = NULL;
		void print_to_source(ostream_pointer o) const = NULL;
	instance:
		yaooc_string_t name_;
		const yaoocpp_container_t* parent_;
		yaoocpp_element_pointer_vector_t constructors_;
	  yaoocpp_element_pointer_vector_t instance_;
	  yaoocpp_element_pointer_vector_t private_;
		yaoocpp_element_pointer_vector_t protected_;
		yaoocpp_element_pointer_vector_t static_;
		bool has_default_ctor_;
		bool has_dtor_;
		bool has_copy_ctor_;
		bool has_assign_;
		bool has_lt_cmp_;
		bool has_to_stream_;
		bool has_from_stream_;
		bool defined_in_top_level_file_;

  protected:
    void inherit();

  private:
    void print_define_type_info(ostream_pointer o,bool has_class_table) const;
//    void print_class_table_implementation(ostream_pointer o) const;
    void print_default_ctor_implementation(const_pointer p,ostream_pointer o);
    void print_dtor_implementation(const_pointer p,ostream_pointer o);
    void print_assign_implementation(const_pointer p,ostream_pointer o);
    void print_type_info_implementation(ostream_pointer o) const;
//    void print_define_type_info(ostream_pointer o,bool has_class_table) const;
    void print_element_prototype(ostream_pointer o,const char* sub_section,
        yaoocpp_element_pointer_vector_const_pointer elements,print_member_t pvt,const char* storage_class) const;
    void print_element_implementation(ostream_pointer o,const char* sub_section,
        yaoocpp_element_pointer_vector_const_pointer elements,print_member_t pvt,const char* storage_class) const;
    void print_type_info_prototype(ostream_pointer o) const;
};

class yaoocpp_struct : yaoocpp_container
{
	table:
    bool is_min_pod() const;
    bool is_pod() const;
		void print_to_header(ostream_pointer o) const;
		void print_to_source(ostream_pointer o) const;
  protected:
    void inherit() = yaoocpp_container_inherit;
};

class yaoocpp_container_with_class_table : yaoocpp_container
{
		yaoocpp_container_with_class_table();
		~yaoocpp_container_with_class_table();
		yaoocpp_container_with_class_table(yaoocpp_container_with_class_table*);
		operator=();
	table:
    void inherit();
		void print_to_header(ostream_pointer o) const;
		void print_to_source(ostream_pointer o) const;
	instance:
	  yaoocpp_element_pointer_vector_t table_;
  protected:
    void inherit();

  private:
//    void print_class_table_implementation(ostream_pointer o);
};

class yaoocpp_class: yaoocpp_container_with_class_table
{
	table:
		void print_to_header(ostream_pointer o) const;
		void print_to_source(ostream_pointer o) const;

  protected:
    void inherit() = yaoocpp_container_with_class_table_inherit;

};

class yaoocpp_union : yaoocpp_container_with_class_table
{
	table:
		void print_to_header(ostream_pointer o) const;
		void print_to_source(ostream_pointer o) const;
  protected:
    void inherit() = yaoocpp_container_with_class_table_inherit;
};



#endif
