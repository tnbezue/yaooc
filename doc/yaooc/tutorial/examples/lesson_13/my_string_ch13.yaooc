#ifndef __MY_STRING_YAOOC_INCLUDED__
#define __MY_STRING_YAOOC_INCLUDED__

/* C and C++ comments can be used */

// The following will be converted to "#include <yaooc/object.h" in header file
#include <yaooc/object.yaooc>
/* The following will be copied as is to header file */
#if 0 // HEADER
#include <string.h>
#include <yaooc/stream.h>
#endif // HEADER
/* The following will be copied as is to source file */
#if 0 // SOURCE
#include <stdio.h>
#include <stdlib.h>
#endif // SOURCE

class my_string : yaooc_object   /* my_string inherits from yaooc_object */
{
    /*
      Type info methods.
			Can be specified in any order.  Any of these may be omitted.  A value of NULL
			is used in the type info table if not specified
    */
    my_string();              /* default constructor. */
    ~my_string();             /* destructor */
    my_string(my_string);     /* copy constructor */
    operator=();              /* assignment */
    operator<=>();            /* rich compare */
    operator<<();             /* to stream */
		operator>>();             /* from stream */
    /*
      Constructors
    */
    my_string_ctor_ccs_size(const char* str,size_t n);  /* Create from n characters of string */
    my_string_ctor_ccs(const char* str);                /* Create from entire string */
    my_string_ctor_chr_size(int ch,size_t n);           /* Create using n copies of ch */

    /*
			Table entries.
    */

    table:
      const char* type_name_="my_string_t";                  /* Type name. If not specified, YAOOCPP adds it */
			const size_t n_pos = -1;                               /* variable member of table */
      void swap(pointer o);                                  /* Override yaooc_object swap method */
      const char* get() const;                               /* returns string value */
      const char* c_str() const = my_string_get;             /* same as get */
      void set(const char* s);                               /* Sets string */
      my_string_pointer substr(size_t beg,size_t n);         /* Return new string object created from substring of this string */
      void insert(size_t pos,const char* s);                 /* Insert string at position */
      void insertn(size_t pos,const char* s,size_t n);       /* Insert n chars from string at position */
      void erase(size_t pos,size_t n);                       /* Erase n chars starting at pos */
      void append(const char* s);                            /* Append string */
      void appendn(const char* s,size_t n);                  /* Append n characters from string */
      const char* find(const char* s) const;                 /* return pointer to first occurance of substring s in this string */
      const char* rfind(const char* s) const;                /* return pointer to last occurance of substring s in this string */
      const char* find_chr(char ch) const;                   /* return pointer to last occurance of character ch in this string */
      const char* rfind_chr(char ch) const;                  /* return pointer to last occurance of character ch in this string */
      char * at(size_t i);                                   /* Return pointer to character at index i */
      size_t size() const;                                   /* Return size of string */

    /*
      Instance members
    */
    instance:
      char * str;                                            /* The string */

    /*
			Protected.
    */
    protected:
      void insert_space(size_t pos,size_t n);                /* Insert space in string */
      void erase_space(size_t pos,size_t n);                 /* erase space in string */

    /*
      Private methods and variables are meant for use only by this class.  They will be declared as
      static in the C source file.
    */
    private:
      void allocate_space(size_t n);                         /* Allocates space to hold string */
      char *strrstr(const char *pat) const;                  /* Find last pat in str */

    table: /* More things to add to table */
      size_t length() const = my_string_size;                /* Same as size */
      char* begin() const = my_string_get;                   /* Return beginning of string. Same as get */
      char* end() const;                                     /* Returns end of string */
};

#endif
