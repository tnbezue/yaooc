#include <stdio.h>
#include <string.h>

%include <yaooc/object.yaooh>
#include <yaooc/stream.h>
%class my_string : yaooc_object {
    my_string()
    {
      this->str=NULL;
    }

    ~my_string() {
      if(this->str)
        FREE(this->str);
    }

    my_string(src) : my_string()
    {
      assign(this,src);
    }

    operator=(src)
    {
      M(this,set,src->str); // Could also use my_string_set(this,src->str);
    }

    int operator<=>(lhs,rhs)
    {
      // lhs and rhs are const pointers to my_string instances
      if(lhs->str == NULL) {
        if(rhs->str == NULL)
        return 0; /* both NULL, equal */
        else
        return -1; /* lhs is NULL, rhs is not.  NULL is less than not NULL */
      } else if(rhs->str == NULL)
        return 1; /* lhs is not NULL, rhs is NULL. non NULL greater than NULL */
      return strcmp(lhs->str,rhs->str); /* Both not null, compare the strings */
    }

    operator<<(ostrm) {  // ostrm is a pointer to yaooc output stream
      M(ostrm,printf,"%s",this->str);
    }

    operator>>(istrm) {  // istrm is a pointer to yaooc input stream
      char temp[256];
      M(istrm,scanf,"%255s",temp);
      my_string_dtor(this);
      this->str=strdup(temp);
    }

    // Constructors
    // Create my_string using the first n characters of a null terminated character array
    // Uses default constructor as an initializer
    my_string_ctor_ccs_size(const char* str,size_t n) : my_string()
    {
      if(str != NULL) {
        if(n > strlen(str))
          n=strlen(str);
        if(n > 0) {
          this->str=malloc(n+1);
          strncpy(this->str,str,n);
          this->str[n]=0;
        }
      }
    }

    // Create my_string using entire null terminated character array
    // Uses another constructor as an initialier
    my_string_ctor_ccs(const char* str) : my_string_ctor_ccs_size(str,SIZE_MAX)
    {
    }

    // Create my_string of n copies of supplied character
    // When a constructor is not specified as an initializer, the default constructor for this class will be used
    my_string_ctor_chr_size(int c,size_t n) : str(malloc(n+1))
    {
      memset(this->str,c,n);
      this->str[n]=0;
    }
  instance:
    char* str;
  table:
    const char* get() const
    {
      return this->str;
    }

    void set(const char* str)
    {
      my_string_dtor(this);
      this->str = str ? strdup(str) : NULL;
    }
};

int main(int argc,char* argv[])
{
  my_string_t* ms1 = new_ctor(my_string,my_string_ctor_ccs_size,"This is a demostration.  This will not be used",23);
  my_string_t* ms2 = new_ctor(my_string,my_string_ctor_ccs,"This is a demostration.");
  my_string_t* ms3 = new_ctor(my_string,my_string_ctor_chr_size,'Y',23);
  STREAM(cout,ms1,endl,ms2,endl,ms3,endl);
  delete(ms1);
  delete(ms2);
  delete(ms3);
}
