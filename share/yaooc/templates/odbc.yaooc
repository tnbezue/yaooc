#ifndef __YAOOC_ODBC_INCLUDED__
#define __YAOOC_ODBC_INCLUDED__

#include "object.yaooc"
#include "exception.yaooc"

class yaooc_odbc_exception : yaooc_exception
{
	yaooc_odbc_exception_ctor_v(const char* fmt,...) = yaooc_exception_ctor_v;
};

class yaooc_odbc_environment : yaooc_object {
		yaooc_odbc_environment();
		~yaooc_odbc_environment();
	table:
		SQLHENV env();
	protected:
		map_odbc_string_string_t* get_drivers();
		map_odbc_string_string_t* get_sources();
	private:
		SQLHENV henv_ = SQL_NULL_HANDLE;
};

class yaooc_odbc_value : yaooc_object {
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
};

/*
	All types of signed integer -- bit, bigint, smallint, etc
*/
class yaooc_odbc_integer : yaooc_odbc_value {
		yaooc_odbc_integer();
		yaooc_odbc_integer(yaooc_odbc_integer);
		operator=();
	instance:
		long long value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		long long get() const;
		void set(long long v);
};

/*
	All types of unsigned integer
*/
class yaooc_odbc_unsigned_integer : yaooc_odbc_value {
		yaooc_odbc_unsigned_integer();
		yaooc_odbc_unsigned_integer(yaooc_odbc_unsigned_integer);
		operator=();
	instance:
		unsigned long long value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		unsigned long long get() const;
		void set(unsigned long long v);
};

/*
	Real types -- decimal, float, double
*/
class yaooc_odbc_real : yaooc_odbc_value {
		yaooc_odbc_real();
		yaooc_odbc_real(yaooc_odbc_real);
		operator=();
	instance:
		double value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		double get() const;
		void set(double v);
};

/*
	all char types -- char, varchar, text
*/
class yaooc_odbc_string : yaooc_odbc_value {
		yaooc_odbc_string();
		yaooc_odbc_string_size(size_t size);
		~yaooc_odbc_string();
		yaooc_odbc_string(yaooc_odbc_string);
		operator=();
	instance:
		size_t size_;
		char * value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		const char* get() const;
		void set(const char* v,size_t n);
};

class yaooc_odbc_blob : yaooc_odbc_value {
		yaooc_odbc_blob();
		yaooc_odbc_blob_size(size_t size);
		~yaooc_odbc_blob();
		yaooc_odbc_blob(yaooc_odbc_blob);
		operator=();
	instance:
		size_t size_;
		void * value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		void* get() const;
		void set(void* v,size_t n);
};

class yaooc_odbc_time : yaooc_odbc_value {
		yaooc_odbc_time();
		yaooc_odbc_time(yaooc_odbc_time);
		operator=();
	instance:
		TIME_STRUCT value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		TIME_STRUCT get() const;
		void set(TIME_STRUCT v);
		int get_secs() const;
		void set_secs(int secs);
};

class yaooc_odbc_date : yaooc_odbc_value {
		yaooc_odbc_date();
		yaooc_odbc_date(yaooc_odbc_date);
		operator=();
	instance:
		DATE_STRUCT value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		DATE_STRUCT get() const;
		void set(DATE_STRUCT v);
		time_t get_time() const;
		void set_time(time_t t);
};

class yaooc_odbc_timestamp : yaooc_odbc_value {
		yaooc_odbc_timestamp();
		yaooc_odbc_timestamp(yaooc_odbc_timestamp);
		operator=();
	instance:
		TIMESTAMP_STRUCT value_;
	table:
		SQLSMALLINT c_data_type() const;
		SQLLEN column_size() const;
		void* data();
		TIMESTAMP_STRUCT get() const;
		void set(TIMESTAMP_STRUCT v);
		time_t get_time() const;
		void set_time(time_t t);
};

class yaooc_odbc_statement : yaooc_object {
		yaooc_odbc_statement();
		~yaooc_odbc_statement();
		operator=();
	table:
		bool bindcols(odbc_value_t* v,...);
		bool bindparams(odbc_value_t* v,...);
		bool fetch();
		bool execute();
	instance:
		SQLHSTMT statement_handle_;
	private:
		void set_handle(SQLHSTMT h);

};

class yaooc_odbc_connection : yaooc_object
{
	yaooc_odbc_connection();
	yaooc_odbc_connection_connect_str(const char* str);
	~yaooc_odbc_connection();

	instance:
		SQLHDBC connection_handle_;
	table:
		yaooc_odbc_statement_t* exec_direct(const char* str);
		yaooc_odbc_statement_t* prepare(const char* str);
		void connect(const char* str);
		void disconnect();
		void auto_commit(bool on);
		void commit();
		void rollback();
};

#endif
