/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef __REGEX_YAOOC_INCLUDED__
#define __REGEX_YAOOC_INCLUDED__

#include <yaooc/object.yaooc>
#include <yaooc/exception.yaooc>
#include <yaooc/string.yaooc>
#if 0 //HEADER
#ifdef __YAOOC_USE_TRE
#include <tre/regex.h>
#else
#include <regex.h>
#endif
typedef struct {
	char* pattern_;  // Will be NULL if string is not an re
	int flags_;
} yaooc_regex_regexp_match_info_t;
yaooc_regex_regexp_match_info_t yaooc_regex_is_re_string(const char*);

#endif //HEADER

class yaooc_regex_exception : yaooc_exception {
		yaooc_regex_exception();
		yaooc_regex_exception_ctor_v(const char* s) = yaooc_exception_ctor_v;
};

class yaooc_matchdata : yaooc_object {
    yaooc_matchdata();
    yaooc_matchdata(yaooc_matchdata);
    ~yaooc_matchdata();
    operator=();
  table:
    void swap(pointer other);
    yaooc_string_pointer at(size_t i) const;
    yaooc_string_pointer exec(const char* str);
    const char* subject() const;
    bool bool() const;
    size_t size() const;
  instance:
    regmatch_t * ovector_;
    char* subject_;
    int match_result_;
    int n_captures_;
};

class yaooc_regex : yaooc_object {
    yaooc_regex();
    yaooc_regex(yaooc_regex);
    ~yaooc_regex();
    operator=();
    yaooc_regex_ctor_ccs_int(const char* pattern,int flags);
  private:
    void compile();
    bool match_private(yaooc_matchdata_pointer md,int offset);
	protected:
		int regexec(const regex_t*,const char*,int,size_t,regmatch_t*,int);
  table:
    void set_pattern_flags(const char* pattern);
    void set_pattern_flags(const char* pattern,int flags);
    const char* get_pattern() const;
    int get_flags() const;
    yaooc_matchdata_pointer match(const char* subject,int match_flags);
    bool match_next(yaooc_matchdata_pointer md);
    bool bool() const;
  instance:
    regex_t * re_;
    char* pattern_;
    int	compile_flags_;
    int compile_result_;
};

#endif
