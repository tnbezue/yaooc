/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef __BASE_PARSER_YAOOC_INCLUDED__
#define __BASE_PARSER_YAOOC_INCLUDED__

#include <yaooc/object.yaooc>

#if 0 //HEADER
#include <yaooc/stack.h>
#include <yaooc/stack.h>

yaooc_struct_forward(parser_position);

STACK_DEFINITION(parser_position,parser_position_stack)

# define yaooc_base_parser_current_pos(p) ((yaooc_base_parser_pointer)p)->current_pos_
# define yaooc_base_parser_peek(p) *(((yaooc_base_parser_pointer)p)->current_pos_)
# define yaooc_base_parser_skip(p,n) { int __nn__=n; for(;__nn__>0;__nn__--) yaooc_base_parser_next_chr(p); }


//enum { CRLF=1,C_COMMENT=2,CPP_COMMENT=4,SHELL_COMMENT=8,CUSTOM_WHITESPACE=16};

enum { PARSE_SUCCESS = 0, PARSE_FAILED };

#define RULE_START(p) M((yaooc_base_parser_pointer)p,rule_start)
#define RULE_FAIL(p) M((yaooc_base_parser_pointer)p,rule_fail)
#define RULE_SUCCESS(p) M((yaooc_base_parser_pointer)p,rule_success)

#define OPTIONAL(rule) ((rule),true)
#define TRY_RULE(p,rule) (RULE_START(p), (rule) ? RULE_SUCCESS(p) : RULE_FAIL(p))

#define default_terminal(p) (yaooc_terminal_t){ .beg_=this->current_pos_, .end_=NULL }
#endif //HEADER

#if 0 //SOURCE
#include <string.h>
#include <ctype.h>

#ifdef __YAOOC_USE_TRE__
#include <tre/regex.h>
#else
#include <regex.h>
#endif
#include <yaooc/base_parser.h>

STACK_IMPLEMENTATION(parser_position,parser_position_stack)

#endif //SOURCE

struct parser_position {
  instance:
    const char* pos_;
    size_t line_no_;
};

struct yaooc_terminal {
  instance:
    const char* beg_;
    const char* end_;
  protected:
    char* text() const;
    char* raw_text() const;
};

class yaooc_base_parser : yaooc_object {
    yaooc_base_parser();
    ~yaooc_base_parser();
    yaooc_base_parser(yaooc_base_parser*);
    operator=();
  table:
    void swap(pointer o);
    void set_parse_string(const char* str);
    void rule_start();
    bool rule_success();
    bool rule_fail();
    bool eos();
    bool string_until_chrs(const char* chrs,yaooc_terminal_t* r);
    bool string_while_chrs(const char* chrs,yaooc_terminal_t* r);
    bool string_until_eol(yaooc_terminal_t* r);
    bool whitespace(yaooc_terminal_t* r);
    bool chr(char ch,yaooc_terminal_t* r);
    int chr_choices(const char* ch_choices);
    bool str(const char* str,yaooc_terminal_t* r);
    int str_choices(...);
    bool digits(yaooc_terminal_t* r);
    bool hexdigits(yaooc_terminal_t* r);
    bool integer(yaooc_terminal_t* r);
    bool hexinteger(yaooc_terminal_t* r);
    bool real(yaooc_terminal_t* r);
    bool ident(yaooc_terminal_t* r);
    bool regex(const char* re_str,uint32_t compile_opts,uint32_t match_opts,yaooc_terminal_t* r);
    bool quoted_string(char quote_type,yaooc_terminal_t* r);
    bool single_quoted_string(yaooc_terminal_t* r);
    bool double_quoted_string(yaooc_terminal_t* r);
    bool bare_string(yaooc_terminal_t* r);
    bool string_until_matching_chr(char lch,char rch,yaooc_terminal_t* r);
    bool result() const;
  instance:
    parser_position_stack_t* stack_;
    const char* current_pos_;
    unsigned int line_no_;
    unsigned int whitespace_types_;

  protected:
    bool space(yaooc_terminal_t* r);
    bool crlf(yaooc_terminal_t* r);
    bool shell_comment(yaooc_terminal_t* r);
    bool c_comment(yaooc_terminal_t* r);
    bool cpp_comment(yaooc_terminal_t* r);
};

#endif
