/*
		Copyright (C) 2016-2019  by Terry N Bezue

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef __BASE_PARSER_YAOOC_INCLUDED__
#define __BASE_PARSER_YAOOC_INCLUDED__

#include <yaooc/object.yaooc>

/*H
#include <yaooc/stack.h>

#include <yaooc/stack.h>

typedef struct {
  const char* pos_;
  size_t line_no_;
} parser_position_t;

STACK_DEFINITION(parser_position,parser_position_stack)

#define default_terminal { .class_table_ = &yaooc_terminal_class_table , .beg_=this->current_pos_, .end_=NULL }

enum { CRLF=1,C_COMMENT=2,CPP_COMMENT=4,SHELL_COMMENT=8,CUSTOM_WHITESPACE=16};
enum { PARSE_SUCCESS = 0, PARSE_FAILED };
H*/

/*S
#include <string.h>
#include <ctype.h>

#ifdef __YAOOC_USE_TRE__
#include <tre/regex.h>
#else
#include <regex.h>
#endif
#include <yaooc/base_parser.h>

DEFINE_POD_TYPE_INFO(parser_position,N,N,N)
STACK_IMPLEMENTATION(parser_position,parser_position_stack)

S*/

class yaooc_terminal : yaooc_object {
    yaooc_terminal();

  table:
    char* get_text() const;
    char* get_raw_text() const;

  instance:
    const char* beg_;
    const char* end_;

};

class yaooc_base_parser : yaooc_object {
    yaooc_base_parser();
    ~yaooc_base_parser();
    yaooc_base_parser(yaooc_base_parser);
    operator=();
  table:
    void swap(pointer o);
    void set_parse_string(const char* str);
    void rule_start();
    void rule_success();
    void rule_fail();
    yaooc_terminal_t eos();
    yaooc_terminal_t string_until_chrs(const char* chrs);
    yaooc_terminal_t string_while_chrs(const char* chrs);
    yaooc_terminal_t string_until_eol();
    yaooc_terminal_t shell_comment();
    yaooc_terminal_t c_comment();
    yaooc_terminal_t cpp_comment();
    yaooc_terminal_t custom_whitespace();
    void set_whitespace_types(uint32_t ws);
    uint32_t get_whitespace_types();
    int whitespace();
    yaooc_terminal_t chr(char ch);
    int chr_choices(const char* ch_choices);
    yaooc_terminal_t str(const char* str);
    int str_choices(...);
    yaooc_terminal_t digits();
    yaooc_terminal_t hexdigits();
    yaooc_terminal_t integer();
    yaooc_terminal_t hexinteger();
    yaooc_terminal_t real();
    yaooc_terminal_t ident();
    yaooc_terminal_t regex(const char* re_str,uint32_t compile_opts,uint32_t match_opts);
    yaooc_terminal_t quoted_string(char quote_type);
    yaooc_terminal_t single_quoted_string();
    yaooc_terminal_t double_quoted_string();
    yaooc_terminal_t bare_string();
    yaooc_terminal_t string_until_matching_chr(char lch,char rch);
    yaooc_base_parser_result_t result() const;
  instance:
    const char* subject_;
    parser_position_stack_pointer stack_;
    const char* current_pos_;
    unsigned int line_no_;
    unsigned int whitespace_types_;
    yaooc_base_parser_result_t result_;
};

#endif
