#ifndef __ORDERED_ARRAY_CONTAINER_YAOOC_INCLUDED__
#define __ORDERED_ARRAY_CONTAINER_YAOOC_INCLUDED__

#include <yaooc/array_container.yaooc>

#if 0 //HEADER
typedef struct {
	yaooc_private_iterator position_;	// position at which it was found.  If found_ is false, indicates position to insert item
	bool found_;			// indicates if item found
} yaooc_ordered_array_container_find_result_t;
#endif //HEADER

#if 0 //SOURCE
#include <string.h>
#include <stdio.h>
#endif //SOURCE

class yaooc_ordered_array_container : yaooc_array_container
{
//    yaooc_ordered_array_container_ctor_ti(const type_info_t* ti) = yaooc_array_container_ctor_ti;
  private:
  protected:
    iterator insert(const_iterator pos,const_pointer value);
    iterator insertn(const_iterator pos,size_t n,const_pointer val);
    iterator insert_range(const_iterator pos,const_iterator f,const_iterator l);
    yaooc_ordered_array_container_find_result_t find_protected(const_pointer value);
    iterator find(const_pointer value);
    size_t erase_value(const_pointer value);
    void resize(size_t n);
    void resize_value(size_t n,const_pointer value);

  table:
};

#endif
