#ifndef __STRING_YAOOC_INCLUDED__
#define __STRING_YAOOC_INCLUDED__

#include <yaooc/array_container.yaooc>
#if 0 //HEADER
#include <yaooc/vector.h>

typedef char* yaooc_string_iterator;
typedef const char* yaooc_string_const_iterator;
yaooc_class_forward(yaooc_regex);
yaooc_class_forward(yaooc_string_vector);
#endif //HEADER

class yaooc_string : yaooc_array_container
{
    yaooc_string();
    yaooc_string(yaooc_string*);
    yaooc_string_ctor_ccs(const char* str);
    yaooc_string_ctor_ccs_n(const char* str, size_t n);
    yaooc_string_ctor_chr_n(char c,size_t n);
    operator=();
    operator<();
		operator<<();
		operator>>();

  protected:
    const size_t npos = -1;
  table:
    const size_t extra_capacity_=1;
    void reserve(size_t n) = yaooc_array_container_reserve;
    void insert(size_t ipos,const char* str);
    void insertn(size_t ipos,const char* str,size_t count);
    void insert_chr(size_t pos,char ch);
    void insertn_chr(size_t pos,size_t count,char ch);
    void set(const char* str);
    void setn(const char* str,size_t count);
    void erase(size_t pos) = yaooc_array_container_erase;
    void erasen(size_t pos,size_t n);
    void replace(size_t pos,size_t n,const char* str);
    void replacen(size_t pos,size_t n,const char* str,size_t pos);
    void resize(size_t n);
    void resize_value(size_t n,char ch);
    void shrink_to_fit() = yaooc_array_container_shrink_to_fit;
    void append(const char* str);
    void appendn(const char* str,size_t count);
    yaooc_string_pointer substr(size_t ipos,size_t count) const;
    yaooc_string_pointer upcase() const;
    void upcase_();
    yaooc_string_pointer downcase() const;
    void downcase_();
    yaooc_string_pointer ltrim() const;
    void ltrim_();
    yaooc_string_pointer rtrim() const;
    void rtrim_();
    yaooc_string_pointer trim() const;
    void trim_();
		yaooc_string_pointer sub(const char* pat,const char* str) const;
		void sub_(const char* pat,const char* str);
		yaooc_string_pointer sub_re(const char* pat,yaooc_regex_const_pointer re) const;
		void sub_re_(const char* pat,yaooc_regex_const_pointer re);
		yaooc_string_pointer gsub(const char* pat,const char* str) const;
		void gsub_(const char* pat,const char* str);
		yaooc_string_pointer gsub(const char* pat,yaooc_regex_const_pointer re) const;
		void gsub_(const char* pat,yaooc_regex_const_pointer re);
		bool match(const char* pat) const;
		bool match_re(yaooc_regex_const_pointer re) const;
    bool starts_with(const char* str) const;
    bool ends_with(const char* str) const;
    void clear();
    size_t findstr(const char* str,size_t pos);
    size_t rfindstr(const char* str,size_t pos);
    size_t findchr(char ch,size_t pos);
    size_t rfindchr(char ch,size_t pos);
    yaooc_string_vector_pointer split(const char* str,size_t max) const;
    yaooc_string_vector_pointer split_re(yaooc_regex_const_pointer re,size_t max) const;
    const char* c_str() const = yaooc_array_container_begin;
};

#endif
