#ifndef __JSON_YAOOC_INCLUDED__
#define __JSON_YAOOC_INCLUDED__

#include <yaooc/exception.yaooc>

#if 0 //HEADER

#include <yaooc/stream.h>
#include <yaooc/vector.h>
#include <yaooc/map.h>
typedef enum { JSON_UNDEFINED=0, JSON_NULL, JSON_BOOL, JSON_INTEGER, JSON_REAL, JSON_STRING,
        JSON_ARRAY, JSON_OBJECT } yaooc_json_type_t;

yaooc_class_forward(yaooc_json_value_array)
yaooc_class_forward(yaooc_json_string_value_map)

typedef union {
  bool    bool_;
  int64_t int_;
  double  real_;
  char*   string_;
  yaooc_json_value_array_t* array_;
  yaooc_json_string_value_map_t* object_;
} json_data_t;

#endif //HEADER

#if 0 //SOURCE
#include <string.h>
#include <stdio.h>
#include <inttypes.h>
static const char* yaooc_json_type_strings[] =
  {
    "JSON_UNDEFINED" , "JSON_NULL", "JSON_BOOL" , "JSON_INTEGER" , "JSON_REAL" ,
    "JSON_STRING", "JSON_ARRAY", "JSON_OBJECT"
  };
#endif //SOURCE

class yaooc_json_exception : yaooc_exception
{
  yaooc_json_exception();
  ~yaooc_json_exception();
  yaooc_json_exception(yaooc_json_exception);
  operator=();
  yaooc_json_exception_ctor_ccs(const char * str);
  table:
    const char* what() const;
  instance:
    char* exception_str_;
};

class yaooc_json_value : yaooc_object
{
    yaooc_json_value();
    yaooc_json_value(yaooc_json_value);
    ~yaooc_json_value();
    operator=();
    operator<();
  table:
    void virtual_dtor();
    void virtual_copy_ctor(pointer s);
    void virtual_assign(pointer s);
    bool virtual_less_than_compare(const_pointer o) const;
    void print(ostream_pointer);
  instance:
    json_type_t type_;
    json_data_t data_;
};

class yaooc_json_null : yaooc_json_value
{
    yaooc_json_null();
    yaooc_json_null(yaooc_json_null);
  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
};

class yaooc_json_bool : yaooc_json_value
{
    yaooc_json_bool();
    yaooc_json_bool(yaooc_json_bool);
    yaooc_json_bool_ctor_bool(bool value);
  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    void set(bool value);
    bool get() const;
};

class yaooc_json_integer : yaooc_json_value
{
    yaooc_json_integer();
    yaooc_json_integer(yaooc_json_integer);
    yaooc_json_integer_ctor_int(int value);
  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    void set(int64_t value);
    int64_t get() const;
};

class yaooc_json_real : yaooc_json_value
{
    yaooc_json_real();
    yaooc_json_real(yaooc_json_real);
    yaooc_json_real_ctor_real(double value);

  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    void set(double value);
    double get() const;
};

class yaooc_json_string : yaooc_json_value
{
    yaooc_json_string();
    yaooc_json_string(yaooc_json_string);
    yaooc_json_string_ctor_ccs(const char* str);
    yaooc_json_string_ctor_ccs_size(const char* str,size_t n);

  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    void set(const char* value);
    const char* get() const;
    size_t size() const;
    void clear();
};

class yaooc_json_array : yaooc_json_value
{
    yaooc_json_array();
    yaooc_json_array(yaooc_json_array);

  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    yaooc_json_array_iterator insert(pointer value);
    void erase(pointer value);
    void clear();
    size_t size() const;
    yaooc_json_array_iterator at(size_t i) const;
    yaooc_json_array_iterator begin() const;
    yaooc_json_array_iterator end() const;
};

class yaooc_json_object : yaooc_json_value
{
    yaooc_json_object();
    yaooc_json_object(yaooc_json_object);

  table:
    void virtual_dtor();
    void virtual_copy_ctor();
    void virtual_assign();
    bool virtual_less_than_compare();
    void print(ostream_pointer);
    yaooc_json_object_iterator insert(const_pointer str,const_pointer val);
    void erase(const_pointer str);
    void clear();
    size_t size() const;
    yaooc_json_value_pointer at(const_pointer str) const;
    yaooc_json_object_iterator begin() const;
    yaooc_json_object_iterator end() const;

};

#endif
