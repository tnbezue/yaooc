#ifndef __SOCKET_INCLUDED__
#define __SOCKET_INCLUDED__

#include <yaooc/object.yaooc>
#include <yaooc/ipaddress.yaooc>
#include <yaooc/exception.yaooc>
#if 0 //HEADER
#include <string.h>
#include <unistd.h>
#ifdef __WIN32__
# include <winsock2.h>         // for socket(), connect(), send(), and recv()
  typedef int socklen_t;
#else
# include <sys/types.h>
# include <sys/socket.h>      // for socket(), connect(), send(), and recv()
# include <sys/ioctl.h>
# include <netdb.h>           // for gethostbyname()
# include <arpa/inet.h>       // for sockaddr_in and inet_addr()
#endif

#ifdef _WIN32
void yaooc_socket_startup();
void yaooc_socket_cleanup();
#else
#define yaooc_socket_startup()
#define yaooc_socket_cleanup()
#endif
#endif //HEADER

#if 0 //SOURCE
#include <poll.h>
#ifdef _WIN32
void yaooc_socket_startup()
{
	WORD wVersionRequested;
	WSADATA wsaData;
	wVersionRequested = MAKEWORD(2, 2);				// Request Winsock v2.2
	WSAStartup(wVersionRequested, &wsaData);  // Load Winsock DLL
}

void yaooc_socket_cleanup() { WSACleanup(); }
#endif
#endif //SOURCE

class yaooc_socket_exception : yaooc_exception
{
	yaooc_socket_exception_ctor_v(const char*fmt,...) = yaooc_exception_ctor_v;
};

class yaooc_socket : yaooc_object {
		yaooc_socket();  // throws exception, do not allow to create an socket
		~yaooc_socket();
		yaooc_socket(yaooc_socket*);
		operator=();
	instance:
		int sock_fd_;

	table:
		void close();
		int send(const char* s);
		int sendn(const void* buffer,size_t n);
		int poll(int timeout_ms);
		int recv(void* buffer,int n);
		int blocking();
		int non_blocking();
		int async();
		int sync();
		void debug(bool v);
		void reuseaddr(bool v);
		void keepalive(int opt_value);
		bool is_open() const;
		yaooc_ipaddress_pointer get_local_ip() const;
		unsigned int get_local_port() const;
		yaooc_ipaddress_pointer get_foreign_ip() const;
		unsigned int get_remote_port() const;

	protected:
		int setsockopt(int level, int option_name,const void *option_value, socklen_t option_len);
};

class yaooc_tcp_socket : yaooc_socket
{
		yaooc_tcp_socket();
		yaooc_tcp_socket_ctor_host_port(const char* host,unsigned int port);
		yaooc_tcp_socket_ctor_host_service(const char* host,const char* service);

	table:
		void connect_service(const char* host,const char* service);
		void connect_port(const char* host, unsigned int port);
};

class yaooc_tcp_socket_server : yaooc_socket
{
		yaooc_tcp_socket_server();
		yaooc_tcp_socket_server_ctor_service_n(const char* service, unsigned int n);
		yaooc_tcp_socket_server_ctor_port_n(unsigned int port,unsigned int n);
	table:
		void listen_service( const char* service,unsigned int max_connections);
		void listen_port(unsigned int port,unsigned int max_connections);
		yaooc_tcp_socket_pointer accept();
};

class yaooc_udp_socket : yaooc_socket
{
		yaooc_udp_socket();
		yaooc_udp_socket_ctor_host_port(const char* host,unsigned int port);
		yaooc_udp_socket_ctor_host_service(const char* host,unsigned int port);
	table:
		void broadcast(bool v);
		void connect_service(const char* host,const char* service);
		void connect_port(const char* host,unsigned int port);
};

#endif
