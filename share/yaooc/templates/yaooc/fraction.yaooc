#ifndef __FRACTION_YAOOC_INCLUDED__
#define __FRACTION_YAOOC_INCLUDED__

#if 0 // HEADER
#include <yaooc/macros.h>
#include <yaooc/stream.h>
#include <yaooc/string.h>
#endif // HEADER

#if 0 // SOURCE
#include <math.h>
#endif // SOURCE
#include <yaooc/exception.yaooc>

class yaooc_fraction {
    yaooc_fraction();
    operator<();
    operator<<();
    operator>>();
    yaooc_fraction_ctor_n_d(int32_t n,int32_t d);
    yaooc_fraction_ctor_mixed(int32_t w,int32_t n,int32_t d);
    yaooc_fraction_ctor_double(double d);

  table:
    void plus(pointer other);
    void minus(pointer other);
    void times(pointer other);
    void divided_by(pointer other);
    void set(int64_t n,int64_t d);
    void set_mixed(int64_t w,int64_t n,int64_t d);
    double to_double() const;
    void from_double(double d);
    yaooc_string_t* to_s() const;
    yaooc_string_t* to_mixed_s() const;

  instance:
    int32_t numerator_;
    int32_t denominator_;

  protected:
    double epsilon=0.000005;
    int64_t gcd(int64_t a,int64_t b);

    yaooc_fraction_t* plus_fraction(yaooc_fraction_const_pointer b) const;
    yaooc_fraction_t* minus_fraction(yaooc_fraction_const_pointer b) const;
    yaooc_fraction_t* times_fraction(yaooc_fraction_const_pointer b) const;
    yaooc_fraction_t* divided_by_fraction(yaooc_fraction_const_pointer b) const;
//    void adjust(int64_t n,int64_t d);
};

class yaooc_fraction_exception : yaooc_exception
{
  yaooc_fraction_exception_ctor_v(const char* fmt,...) = yaooc_exception_ctor_v;
};

#endif
